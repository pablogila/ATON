window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "aton", "modulename": "aton", "kind": "module", "doc": "<p align=\"center\"><img width=\"40.0%\" src=\"pics/aton.png\"></p>\n\n<p>Welcome to the <strong>A</strong>b-ini<strong>T</strong>i<strong>O</strong> and <strong>N</strong>eutron research toolbox, or <a href=\"https://en.wikipedia.org/wiki/Aten\">Aton</a>.\nJust like its ancient Egyptian deity counterpart, this all-in-one Python package provides powerful and comprehensive tools for cutting-edge materials research, focused on (but not limited to) neutron science.  </p>\n\n<p>Aton provides a range of spectral analysis tools, from spectra normalisation to deuteration estimation using the DINS impulse approximation.<br />\nA set of physico-chemical constants and definitions is also included.  </p>\n\n<p>Aton also allows you to easily create, edit and analyse all kinds of text files, with a special focus on <em>ab-initio</em> calculations.\nIn particular, it contains interfaces for <a href=\"https://www.quantum-espresso.org/\">Quantum ESPRESSO</a>, <a href=\"https://phonopy.github.io/phonopy/\">Phonopy</a> and <a href=\"https://castep-docs.github.io/castep-docs/\">CASTEP</a>.  </p>\n\n<hr />\n\n<h1 id=\"installation\">Installation</h1>\n\n<p>As always, it is recommended to install your packages in a virtual environment:  </p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>python3<span class=\"w\"> </span>-m<span class=\"w\"> </span>venv<span class=\"w\"> </span>.venv\n<span class=\"nb\">source</span><span class=\"w\"> </span>.venv/bin/activate\n</code></pre>\n</div>\n\n<h2 id=\"with-pip\">With pip</h2>\n\n<p>The fastest way to install Aton is through pip:  </p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>pip<span class=\"w\"> </span>install<span class=\"w\"> </span>aton\n</code></pre>\n</div>\n\n<h2 id=\"from-source\">From source</h2>\n\n<p>Optionally, you can install Aton from the <a href=\"https://github.com/pablogila/Aton/\">GitHub repository</a>.  </p>\n\n<p>First install the dependencies:  </p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>pip<span class=\"w\"> </span>install<span class=\"w\"> </span>pandas<span class=\"w\"> </span>numpy<span class=\"w\"> </span>scipy\n</code></pre>\n</div>\n\n<p>Then clone the repository or download the <a href=\"https://github.com/pablogila/Aton/tags\">latest stable release</a> as a ZIP, unzip it, and run inside the <code>Aton/</code> directory:  </p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>pip<span class=\"w\"> </span>install<span class=\"w\"> </span>.\n</code></pre>\n</div>\n\n<hr />\n\n<h1 id=\"documentation\">Documentation</h1>\n\n<p>The full Aton documentation is available <a href=\"https://pablogila.github.io/Aton/\">online</a>.<br />\nAn offline version of the documentation is found at <code>docs/aton.html</code>.<br />\nCode examples are included in the <code>examples/</code> folder.  </p>\n\n<h2 id=\"submodules\">Submodules</h2>\n\n<p>Aton contains the following modules:  </p>\n\n<ul>\n<li><code>aton.text</code>. See <a href=\"#general-text-edition\">General text edition</a>.</li>\n<li><code>aton.interface</code>. See <a href=\"#interfaces-for-ab-initio-codes\">Interfaces for ab-initio codes</a>.  </li>\n<li><code>aton.spectra</code>. See <a href=\"#spectral-analysis-tools\">Spectral analysis tools</a>.</li>\n<li><code>aton.units</code>. Physical constants and conversion factors.</li>\n<li><code>aton.atoms</code>. Megadictionary with data for all chemical elements.  </li>\n<li><code>aton.elements</code>. Sort and analyse element data, and manage the atoms dictionary.  </li>\n<li><code>aton.file</code>. Manipulate files.  </li>\n<li><code>aton.call</code>. Run bash scripts and related.  </li>\n<li><code>aton.alias</code>. Useful dictionaries for user input correction.  </li>\n</ul>\n\n<h2 id=\"general-text-edition\">General text edition</h2>\n\n<p>The <code>aton.text</code> module includes the following general text-related submodules:</p>\n\n<ul>\n<li><code>aton.text.find</code>. Search for specific content in a text file.  </li>\n<li><code>aton.text.edit</code>. Manipulate text files.  </li>\n<li><code>aton.text.extract</code>. Extract data from raw text strings.  </li>\n</ul>\n\n<h2 id=\"interfaces-for-ab-initio-codes\">Interfaces for ab-initio codes</h2>\n\n<p>The <code>aton.interface</code> module contains interfaces for several <em>ab-initio</em> codes. These are powered by the <code>aton.text</code> module and can be easily extended. The following interfaces are included:  </p>\n\n<ul>\n<li><code>aton.interface.qe</code>. Interface for <a href=\"https://www.quantum-espresso.org/\">Quantum ESPRESSO</a> calculations.</li>\n<li><code>aton.interface.phonopy</code>. Interface for <a href=\"https://phonopy.github.io/phonopy/\">Phonopy</a> calculations.</li>\n<li><code>aton.interface.castep</code> Interface for <a href=\"https://castep-docs.github.io/castep-docs/\">CASTEP</a> calculations.</li>\n</ul>\n\n<h2 id=\"spectral-analysis-tools\">Spectral analysis tools</h2>\n\n<p>The <code>aton.spectra</code> module IS YET TO BE IMPLEMENTED.</p>\n\n<ul>\n<li>Things...</li>\n</ul>\n\n<hr />\n\n<h1 id=\"contributing\">Contributing</h1>\n\n<p>If you are interested in opening an issue or a pull request, please feel free to do so on <a href=\"https://github.com/pablogila/Aton/\">GitHub</a>.<br />\nFor major changes, please get in touch first to discuss the details.  </p>\n\n<h2 id=\"code-style\">Code style</h2>\n\n<p>Please try to follow some general guidelines:  </p>\n\n<ul>\n<li>Use a code style consistent with the rest of the project.  </li>\n<li>Include docstrings to document new additions.  </li>\n<li>Include tests for new features or modifications.  </li>\n<li>Arrange function arguments by order of relevance. Most implemented functions follow something similar to <code>function(file, key/s, value/s, optional)</code>.  </li>\n</ul>\n\n<h2 id=\"testing-with-pytest\">Testing with PyTest</h2>\n\n<p>If you are modifying the source code, you should run the automated tests of the <code>tests/</code> folder to check that everything works as intended.\nTo do so, first install PyTest in your environment,</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>pip<span class=\"w\"> </span>install<span class=\"w\"> </span>pytest\n</code></pre>\n</div>\n\n<p>And then run PyTest inside the <code>Aton/</code> directory,</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>pytest<span class=\"w\"> </span>-vv\n</code></pre>\n</div>\n\n<h2 id=\"compiling-the-documentation\">Compiling the documentation</h2>\n\n<p>The documentation can be compiled automatically to <code>docs/aton.html</code> with <a href=\"https://pdoc.dev/\">Pdoc</a> and Aton itself, by running:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>python3<span class=\"w\"> </span>makedocs.py\n</code></pre>\n</div>\n\n<p>This runs Pdoc, updating links and pictures, and using the dark theme CSS template from the <code>css/</code> folder.</p>\n\n<hr />\n\n<h1 id=\"license\">License</h1>\n\n<p>Copyright (C) 2024  Pablo Gila-Herranz<br />\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the <strong>GNU Affero General Public License</strong> as published\nby the Free Software Foundation, either version <strong>3</strong> of the License, or\n(at your option) any later version.<br />\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.<br />\nSee the attached GNU Affero General Public License for more details.  </p>\n"}, {"fullname": "aton.alias", "modulename": "aton.alias", "kind": "module", "doc": "<h1 id=\"description\">Description</h1>\n\n<p>This module contains common dictionaries to normalise and correct user inputs.\nAll values are in lowercase to allow comparison with the <code>string.lower()</code> method.</p>\n\n<p>Use example:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">unit</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Electronvolts&#39;</span>\n<span class=\"k\">if</span> <span class=\"n\">unit</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span> <span class=\"ow\">in</span> <span class=\"n\">aton</span><span class=\"o\">.</span><span class=\"n\">alias</span><span class=\"o\">.</span><span class=\"n\">units</span><span class=\"p\">[</span><span class=\"s1\">&#39;eV&#39;</span><span class=\"p\">]:</span>\n    <span class=\"o\">...</span> <span class=\"n\">do</span> <span class=\"n\">stuff</span> <span class=\"o\">...</span>\n</code></pre>\n</div>\n\n<h1 id=\"index\">Index</h1>\n\n<ul>\n<li><code>units</code></li>\n<li><code>parameters</code></li>\n<li><code>experiments</code></li>\n<li><code>files</code></li>\n<li><code>boolean</code></li>\n</ul>\n\n<hr />\n"}, {"fullname": "aton.alias.units", "modulename": "aton.alias", "qualname": "units", "kind": "variable", "doc": "<p>Dict with unit names.</p>\n", "annotation": ": dict", "default_value": "{&#x27;mol&#x27;: [&#x27;mol&#x27;, &#x27;mols&#x27;, &#x27;mole&#x27;, &#x27;moles&#x27;], &#x27;g&#x27;: [&#x27;g&#x27;, &#x27;gram&#x27;, &#x27;grams&#x27;], &#x27;kg&#x27;: [&#x27;kg&#x27;, &#x27;kilogram&#x27;, &#x27;kilograms&#x27;], &#x27;amu&#x27;: [&#x27;amu&#x27;, &#x27;atomicmassunit&#x27;, &#x27;atomicmassunits&#x27;], &#x27;eV&#x27;: [&#x27;ev&#x27;, &#x27;electronvolt&#x27;, &#x27;electronvolts&#x27;], &#x27;meV&#x27;: [&#x27;mev&#x27;, &#x27;millielectronvolt&#x27;, &#x27;millielectronvolts&#x27;], &#x27;J&#x27;: [&#x27;j&#x27;, &#x27;joule&#x27;, &#x27;joules&#x27;], &#x27;cal&#x27;: [&#x27;cal&#x27;, &#x27;calorie&#x27;, &#x27;calories&#x27;], &#x27;kcal&#x27;: [&#x27;kcal&#x27;, &#x27;kilocalorie&#x27;, &#x27;kilocalories&#x27;], &#x27;Ry&#x27;: [&#x27;ry&#x27;, &#x27;rydberg&#x27;, &#x27;rydbergs&#x27;], &#x27;cm-1&#x27;: [&#x27;cm^{-1}&#x27;, &#x27;cm1&#x27;, &#x27;cm-1&#x27;, &#x27;cm^-1&#x27;], &#x27;cm&#x27;: [&#x27;cm&#x27;, &#x27;centimeter&#x27;, &#x27;centimeters&#x27;], &#x27;A&#x27;: [&#x27;a&#x27;, &#x27;aa&#x27;, &#x27;angstrom&#x27;, &#x27;angstroms&#x27;, &#x27;armstrong&#x27;, &#x27;armstrongs&#x27;], &#x27;bohr&#x27;: [&#x27;bohr&#x27;, &#x27;bohrs&#x27;, &#x27;bohrradii&#x27;], &#x27;m&#x27;: [&#x27;m&#x27;, &#x27;meter&#x27;, &#x27;meters&#x27;], &#x27;deg&#x27;: [&#x27;deg&#x27;, &#x27;degree&#x27;, &#x27;degrees&#x27;], &#x27;rad&#x27;: [&#x27;rad&#x27;, &#x27;radian&#x27;, &#x27;radians&#x27;], &#x27;bar&#x27;: [&#x27;bar&#x27;, &#x27;bars&#x27;], &#x27;kbar&#x27;: [&#x27;kbar&#x27;, &#x27;kilobar&#x27;, &#x27;kilobars&#x27;], &#x27;Pa&#x27;: [&#x27;pa&#x27;, &#x27;pascal&#x27;, &#x27;pascals&#x27;], &#x27;GPa&#x27;: [&#x27;gpa&#x27;, &#x27;gigapascal&#x27;, &#x27;gigapascals&#x27;], &#x27;s&#x27;: [&#x27;s&#x27;, &#x27;second&#x27;, &#x27;seconds&#x27;], &#x27;H&#x27;: [&#x27;h&#x27;, &#x27;hour&#x27;, &#x27;hours&#x27;]}"}, {"fullname": "aton.alias.parameters", "modulename": "aton.alias", "qualname": "parameters", "kind": "variable", "doc": "<p>Dict with different parameters.</p>\n", "default_value": "{&#x27;height&#x27;: [&#x27;height&#x27;, &#x27;h&#x27;], &#x27;area&#x27;: [&#x27;area&#x27;, &#x27;a&#x27;]}"}, {"fullname": "aton.alias.experiments", "modulename": "aton.alias", "qualname": "experiments", "kind": "variable", "doc": "<p>Dictionary with the available experiment types.</p>\n", "annotation": ": dict", "default_value": "{&#x27;ins&#x27;: [&#x27;ins&#x27;, &#x27;inelasticneutronscattering&#x27;, &#x27;inelastic neutron scattering&#x27;], &#x27;atr&#x27;: [&#x27;atr&#x27;, &#x27;ftir&#x27;, &#x27;attenuatedtotalreflection&#x27;, &#x27;attenuated total reflection&#x27;], &#x27;raman&#x27;: [&#x27;raman&#x27;], &#x27;qens&#x27;: [&#x27;qens&#x27;, &#x27;quasielasticneutronscattering&#x27;, &#x27;quasielastic neutron scattering&#x27;, &#x27;quasi elastic neutron scattering&#x27;]}"}, {"fullname": "aton.alias.files", "modulename": "aton.alias", "qualname": "files", "kind": "variable", "doc": "<p>Strings related to files.</p>\n", "default_value": "{&#x27;file&#x27;: [&#x27;file&#x27;, &#x27;files&#x27;, &#x27;f&#x27;, &#x27;filepath&#x27;, &#x27;file path&#x27;, &#x27;filename&#x27;, &#x27;file name&#x27;], &#x27;dir&#x27;: [&#x27;dir&#x27;, &#x27;directory&#x27;, &#x27;d&#x27;, &#x27;folder&#x27;], &#x27;error&#x27;: [&#x27;Error&#x27;, &#x27;error&#x27;, &#x27;ERROR&#x27;, &#x27;Errors&#x27;, &#x27;errors&#x27;, &#x27;ERRORS&#x27;]}"}, {"fullname": "aton.alias.boolean", "modulename": "aton.alias", "qualname": "boolean", "kind": "variable", "doc": "<p>Strings with booleans such as 'yes' / 'no'.</p>\n", "default_value": "{True: [&#x27;yes&#x27;, &#x27;YES&#x27;, &#x27;Yes&#x27;, &#x27;Y&#x27;, &#x27;y&#x27;, &#x27;T&#x27;, &#x27;True&#x27;, &#x27;TRUE&#x27;, &#x27;t&#x27;, &#x27;true&#x27;, True, &#x27;Si&#x27;, &#x27;SI&#x27;, &#x27;si&#x27;, &#x27;S&#x27;, &#x27;s&#x27;], False: [&#x27;no&#x27;, &#x27;NO&#x27;, &#x27;No&#x27;, &#x27;N&#x27;, &#x27;n&#x27;, &#x27;F&#x27;, &#x27;False&#x27;, &#x27;FALSE&#x27;, &#x27;f&#x27;, &#x27;false&#x27;, False]}"}, {"fullname": "aton.atoms", "modulename": "aton.atoms", "kind": "module", "doc": "<h1 id=\"description\">Description</h1>\n\n<p>This module contains the <code>atoms</code> megadictionary,\nwhich contains the properties of all elements.\nIt is managed and updated automatically with <code>aton.elements</code>,\nwhich also contains the literature references for this data.</p>\n\n<p>The <code>atoms</code> dictionary can be loaded directly as <code>aton.atoms</code>.\nUse example:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">aluminium_cross_section</span> <span class=\"o\">=</span> <span class=\"n\">aton</span><span class=\"o\">.</span><span class=\"n\">atoms</span><span class=\"p\">[</span><span class=\"s1\">&#39;Al&#39;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">cross_section</span>  <span class=\"c1\"># 1.503</span>\n<span class=\"n\">He4_mass</span> <span class=\"o\">=</span> <span class=\"n\">aton</span><span class=\"o\">.</span><span class=\"n\">atoms</span><span class=\"p\">[</span><span class=\"s1\">&#39;H&#39;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">isotope</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">mass</span>  <span class=\"c1\"># 4.0026032497</span>\n</code></pre>\n</div>\n\n<hr />\n"}, {"fullname": "aton.atoms.atoms", "modulename": "aton.atoms", "qualname": "atoms", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;H&#x27;: &lt;aton.elements.Element object&gt;, &#x27;He&#x27;: &lt;aton.elements.Element object&gt;, &#x27;Li&#x27;: &lt;aton.elements.Element object&gt;, &#x27;Be&#x27;: &lt;aton.elements.Element object&gt;, &#x27;B&#x27;: &lt;aton.elements.Element object&gt;, &#x27;C&#x27;: &lt;aton.elements.Element object&gt;, &#x27;N&#x27;: &lt;aton.elements.Element object&gt;, &#x27;O&#x27;: &lt;aton.elements.Element object&gt;, &#x27;F&#x27;: &lt;aton.elements.Element object&gt;, &#x27;Ne&#x27;: &lt;aton.elements.Element object&gt;, &#x27;Na&#x27;: &lt;aton.elements.Element object&gt;, &#x27;Mg&#x27;: &lt;aton.elements.Element object&gt;, &#x27;Al&#x27;: &lt;aton.elements.Element object&gt;, &#x27;Si&#x27;: &lt;aton.elements.Element object&gt;, &#x27;P&#x27;: &lt;aton.elements.Element object&gt;, &#x27;S&#x27;: &lt;aton.elements.Element object&gt;, &#x27;Cl&#x27;: &lt;aton.elements.Element object&gt;, &#x27;Ar&#x27;: &lt;aton.elements.Element object&gt;, &#x27;K&#x27;: &lt;aton.elements.Element object&gt;, &#x27;Ca&#x27;: &lt;aton.elements.Element object&gt;, &#x27;Sc&#x27;: &lt;aton.elements.Element object&gt;, &#x27;Ti&#x27;: &lt;aton.elements.Element object&gt;, &#x27;V&#x27;: &lt;aton.elements.Element object&gt;, &#x27;Cr&#x27;: &lt;aton.elements.Element object&gt;, &#x27;Mn&#x27;: &lt;aton.elements.Element object&gt;, &#x27;Fe&#x27;: &lt;aton.elements.Element object&gt;, &#x27;Co&#x27;: &lt;aton.elements.Element object&gt;, &#x27;Ni&#x27;: &lt;aton.elements.Element object&gt;, &#x27;Cu&#x27;: &lt;aton.elements.Element object&gt;, &#x27;Zn&#x27;: &lt;aton.elements.Element object&gt;, &#x27;Ga&#x27;: &lt;aton.elements.Element object&gt;, &#x27;Ge&#x27;: &lt;aton.elements.Element object&gt;, &#x27;As&#x27;: &lt;aton.elements.Element object&gt;, &#x27;Se&#x27;: &lt;aton.elements.Element object&gt;, &#x27;Br&#x27;: &lt;aton.elements.Element object&gt;, &#x27;Kr&#x27;: &lt;aton.elements.Element object&gt;, &#x27;Rb&#x27;: &lt;aton.elements.Element object&gt;, &#x27;Sr&#x27;: &lt;aton.elements.Element object&gt;, &#x27;Y&#x27;: &lt;aton.elements.Element object&gt;, &#x27;Zr&#x27;: &lt;aton.elements.Element object&gt;, &#x27;Nb&#x27;: &lt;aton.elements.Element object&gt;, &#x27;Mo&#x27;: &lt;aton.elements.Element object&gt;, &#x27;Tc&#x27;: &lt;aton.elements.Element object&gt;, &#x27;Ru&#x27;: &lt;aton.elements.Element object&gt;, &#x27;Rh&#x27;: &lt;aton.elements.Element object&gt;, &#x27;Pd&#x27;: &lt;aton.elements.Element object&gt;, &#x27;Ag&#x27;: &lt;aton.elements.Element object&gt;, &#x27;Cd&#x27;: &lt;aton.elements.Element object&gt;, &#x27;In&#x27;: &lt;aton.elements.Element object&gt;, &#x27;Sn&#x27;: &lt;aton.elements.Element object&gt;, &#x27;Sb&#x27;: &lt;aton.elements.Element object&gt;, &#x27;Te&#x27;: &lt;aton.elements.Element object&gt;, &#x27;I&#x27;: &lt;aton.elements.Element object&gt;, &#x27;Xe&#x27;: &lt;aton.elements.Element object&gt;, &#x27;Cs&#x27;: &lt;aton.elements.Element object&gt;, &#x27;Ba&#x27;: &lt;aton.elements.Element object&gt;, &#x27;La&#x27;: &lt;aton.elements.Element object&gt;, &#x27;Ce&#x27;: &lt;aton.elements.Element object&gt;, &#x27;Pr&#x27;: &lt;aton.elements.Element object&gt;, &#x27;Nd&#x27;: &lt;aton.elements.Element object&gt;, &#x27;Pm&#x27;: &lt;aton.elements.Element object&gt;, &#x27;Sm&#x27;: &lt;aton.elements.Element object&gt;, &#x27;Eu&#x27;: &lt;aton.elements.Element object&gt;, &#x27;Gd&#x27;: &lt;aton.elements.Element object&gt;, &#x27;Tb&#x27;: &lt;aton.elements.Element object&gt;, &#x27;Dy&#x27;: &lt;aton.elements.Element object&gt;, &#x27;Ho&#x27;: &lt;aton.elements.Element object&gt;, &#x27;Er&#x27;: &lt;aton.elements.Element object&gt;, &#x27;Tm&#x27;: &lt;aton.elements.Element object&gt;, &#x27;Yb&#x27;: &lt;aton.elements.Element object&gt;, &#x27;Lu&#x27;: &lt;aton.elements.Element object&gt;, &#x27;Hf&#x27;: &lt;aton.elements.Element object&gt;, &#x27;Ta&#x27;: &lt;aton.elements.Element object&gt;, &#x27;W&#x27;: &lt;aton.elements.Element object&gt;, &#x27;Re&#x27;: &lt;aton.elements.Element object&gt;, &#x27;Os&#x27;: &lt;aton.elements.Element object&gt;, &#x27;Ir&#x27;: &lt;aton.elements.Element object&gt;, &#x27;Pt&#x27;: &lt;aton.elements.Element object&gt;, &#x27;Au&#x27;: &lt;aton.elements.Element object&gt;, &#x27;Hg&#x27;: &lt;aton.elements.Element object&gt;, &#x27;Tl&#x27;: &lt;aton.elements.Element object&gt;, &#x27;Pb&#x27;: &lt;aton.elements.Element object&gt;, &#x27;Bi&#x27;: &lt;aton.elements.Element object&gt;, &#x27;Po&#x27;: &lt;aton.elements.Element object&gt;, &#x27;At&#x27;: &lt;aton.elements.Element object&gt;, &#x27;Rn&#x27;: &lt;aton.elements.Element object&gt;, &#x27;Fr&#x27;: &lt;aton.elements.Element object&gt;, &#x27;Ra&#x27;: &lt;aton.elements.Element object&gt;, &#x27;Ac&#x27;: &lt;aton.elements.Element object&gt;, &#x27;Th&#x27;: &lt;aton.elements.Element object&gt;, &#x27;Pa&#x27;: &lt;aton.elements.Element object&gt;, &#x27;U&#x27;: &lt;aton.elements.Element object&gt;, &#x27;Np&#x27;: &lt;aton.elements.Element object&gt;, &#x27;Pu&#x27;: &lt;aton.elements.Element object&gt;, &#x27;Am&#x27;: &lt;aton.elements.Element object&gt;, &#x27;Cm&#x27;: &lt;aton.elements.Element object&gt;, &#x27;Bk&#x27;: &lt;aton.elements.Element object&gt;, &#x27;Cf&#x27;: &lt;aton.elements.Element object&gt;, &#x27;Es&#x27;: &lt;aton.elements.Element object&gt;, &#x27;Fm&#x27;: &lt;aton.elements.Element object&gt;, &#x27;Md&#x27;: &lt;aton.elements.Element object&gt;, &#x27;No&#x27;: &lt;aton.elements.Element object&gt;, &#x27;Lr&#x27;: &lt;aton.elements.Element object&gt;, &#x27;Rf&#x27;: &lt;aton.elements.Element object&gt;, &#x27;Db&#x27;: &lt;aton.elements.Element object&gt;, &#x27;Sg&#x27;: &lt;aton.elements.Element object&gt;, &#x27;Bh&#x27;: &lt;aton.elements.Element object&gt;, &#x27;Hs&#x27;: &lt;aton.elements.Element object&gt;, &#x27;Mt&#x27;: &lt;aton.elements.Element object&gt;, &#x27;Ds&#x27;: &lt;aton.elements.Element object&gt;, &#x27;Rg&#x27;: &lt;aton.elements.Element object&gt;, &#x27;Cn&#x27;: &lt;aton.elements.Element object&gt;, &#x27;Uut&#x27;: &lt;aton.elements.Element object&gt;, &#x27;Uuq&#x27;: &lt;aton.elements.Element object&gt;, &#x27;Uup&#x27;: &lt;aton.elements.Element object&gt;, &#x27;Uuh&#x27;: &lt;aton.elements.Element object&gt;, &#x27;Uus&#x27;: &lt;aton.elements.Element object&gt;, &#x27;Uuo&#x27;: &lt;aton.elements.Element object&gt;}"}, {"fullname": "aton.call", "modulename": "aton.call", "kind": "module", "doc": "<h1 id=\"description\">Description</h1>\n\n<p>Functions to handle bash calls and related operations on Linux systems.</p>\n\n<h1 id=\"index\">Index</h1>\n\n<ul>\n<li><code>bash()</code></li>\n<li><code>git()</code></li>\n<li><code>here()</code></li>\n</ul>\n\n<hr />\n"}, {"fullname": "aton.call.bash", "modulename": "aton.call", "qualname": "bash", "kind": "function", "doc": "<p>Run a bash shell <code>command</code>, inside an optional <code>cwd</code> directory.\nIf empty, the current working directory will be used.\nPrints the running command and outputs by default, override this with <code>verbose=False</code>.\nReturns the result of the command used, except for when\nerrors are raised automatically; set <code>return_anyway=True</code> to override this.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">command</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">cwd</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">return_anyway</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "aton.call.git", "modulename": "aton.call", "qualname": "git", "kind": "function", "doc": "<p>Automatically update a Git repository.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">path</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">message</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">tag</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "aton.call.here", "modulename": "aton.call", "qualname": "here", "kind": "function", "doc": "<p>Runs the rest of the script inside the specified <code>folder</code>.\nIf none is provided, it runs from the same directory where the current script lies.\nThis is really useful to run scripts from the VSCode terminal, etc.\nReturns the path of the used <code>folder</code>, or the path of the script if folder is not provided.</p>\n\n<p>Note that this changes not only the working directory of your script,\nbut also of other scripts that import and run your script.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">folder</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "aton.elements", "modulename": "aton.elements", "kind": "module", "doc": "<h1 id=\"description\">Description</h1>\n\n<p>This module contains functions to sort and analyse element data\nfrom the <code>aton.atoms</code> megadictionary, which contains the properties of all elements.\nIt also contains the tools needed to automatically update said megadictionary.</p>\n\n<h1 id=\"index\">Index</h1>\n\n<ul>\n<li><code>export_atoms()</code> Used to update and export the <code>aton.atoms</code> megadictionary.</li>\n<li><code>split_isotope()</code></li>\n<li><code>allowed_isotopes()</code></li>\n</ul>\n\n<h1 id=\"references\">References</h1>\n\n<p>Atomic <code>mass</code> are in atomic mass units (amu), and come from:\nPure Appl. Chem., Vol. 78, No. 11, pp. 2051-2066, 2006.\nThe following masses are obtained from Wikipedia:\nAc: 227, Np: 237, Pm: 145, Tc: 98</p>\n\n<p>Isotope <code>mass</code>, <code>mass_number</code> and <code>abundance</code> come from:\nJ. R. de Laeter, J. K. B\u00f6hlke, P. De Bi\u00e8vre, H. Hidaka, H. S. Peiser, K. J. R. Rosman\nand P. D. P. Taylor (2003). 'Atomic weights of the elements. Review 2000 (IUPAC Technical Report)'</p>\n\n<p>Total bound scattering <code>cross_section</code> $\\sigma_s$ are in barns (1 b = 100 fm$^2$).\nFrom Felix Fernandez-Alonso's book 'Neutron Scattering Fundamentals' (2013).</p>\n\n<hr />\n"}, {"fullname": "aton.elements.Element", "modulename": "aton.elements", "qualname": "Element", "kind": "class", "doc": "<p>Used in the <code>aton.atoms</code> megadictionary to store element data.</p>\n"}, {"fullname": "aton.elements.Element.__init__", "modulename": "aton.elements", "qualname": "Element.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">Z</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">symbol</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">mass</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">cross_section</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">isotope</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "aton.elements.Element.Z", "modulename": "aton.elements", "qualname": "Element.Z", "kind": "variable", "doc": "<p>Atomic number (Z). Corresponds to the number of protons / electrons.</p>\n", "annotation": ": int"}, {"fullname": "aton.elements.Element.symbol", "modulename": "aton.elements", "qualname": "Element.symbol", "kind": "variable", "doc": "<p>Standard symbol of the element.</p>\n", "annotation": ": str"}, {"fullname": "aton.elements.Element.name", "modulename": "aton.elements", "qualname": "Element.name", "kind": "variable", "doc": "<p>Full name.</p>\n", "annotation": ": str"}, {"fullname": "aton.elements.Element.mass", "modulename": "aton.elements", "qualname": "Element.mass", "kind": "variable", "doc": "<p>Atomic mass, in atomic mass units (amu).</p>\n", "annotation": ": float"}, {"fullname": "aton.elements.Element.cross_section", "modulename": "aton.elements", "qualname": "Element.cross_section", "kind": "variable", "doc": "<p>Total bound scattering cross section.</p>\n", "annotation": ": float"}, {"fullname": "aton.elements.Element.isotope", "modulename": "aton.elements", "qualname": "Element.isotope", "kind": "variable", "doc": "<p>Dictionary containing the different <code>Isotope</code> of the element. The keys are the mass number (A).</p>\n", "annotation": ": dict"}, {"fullname": "aton.elements.Isotope", "modulename": "aton.elements", "qualname": "Isotope", "kind": "class", "doc": "<p>Used in the <code>aton.atoms</code> megadictionary to store isotope data.</p>\n"}, {"fullname": "aton.elements.Isotope.__init__", "modulename": "aton.elements", "qualname": "Isotope.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">A</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">mass</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">abundance</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">cross_section</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "aton.elements.Isotope.A", "modulename": "aton.elements", "qualname": "Isotope.A", "kind": "variable", "doc": "<p>Mass number (A) of the isotope. Corresponds to the total number of protons + neutrons in the core.</p>\n", "annotation": ": int"}, {"fullname": "aton.elements.Isotope.mass", "modulename": "aton.elements", "qualname": "Isotope.mass", "kind": "variable", "doc": "<p>Atomic mass of the isotope, in atomic mass units (amu).</p>\n", "annotation": ": float"}, {"fullname": "aton.elements.Isotope.abundance", "modulename": "aton.elements", "qualname": "Isotope.abundance", "kind": "variable", "doc": "<p>Relative abundance of the isotope.</p>\n", "annotation": ": float"}, {"fullname": "aton.elements.Isotope.cross_section", "modulename": "aton.elements", "qualname": "Isotope.cross_section", "kind": "variable", "doc": "<p>Total bound scattering cross section of the isotope.</p>\n", "annotation": ": float"}, {"fullname": "aton.elements.export_atoms", "modulename": "aton.elements", "qualname": "export_atoms", "kind": "function", "doc": "<p>Export a dictionary of chemical elements to a python file.</p>\n\n<p>This is used to build and update the <code>aton.atoms</code> megadictionary, that contains\nall the element data, such as masses, cross-sections, etc.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">atoms</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>, </span><span class=\"param\"><span class=\"n\">filename</span><span class=\"o\">=</span><span class=\"s1\">&#39;exported_atoms.py&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "aton.elements.split_isotope", "modulename": "aton.elements", "qualname": "split_isotope", "kind": "function", "doc": "<p>Split the <code>name</code> of an isotope into the element and the mass number, eg. He4 -> He, 4.</p>\n\n<p>If the isotope is not found in the <code>aton.atoms</code> megadictionary it raises an error,\ninforming of the allowed mass numbers (A) values for the given element.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span>:</span></span>", "funcdef": "def"}, {"fullname": "aton.elements.allowed_isotopes", "modulename": "aton.elements", "qualname": "allowed_isotopes", "kind": "function", "doc": "<p>Return a list with the allowed mass numbers (A) of a given <code>element</code>.</p>\n\n<p>These mass numbers are used as isotope keys in the <code>aton.atoms</code> megadictionary.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">element</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "aton.file", "modulename": "aton.file", "kind": "module", "doc": "<h1 id=\"description\">Description</h1>\n\n<p>Functions to move files around.</p>\n\n<h1 id=\"index\">Index</h1>\n\n<ul>\n<li><code>get()</code></li>\n<li><code>get_list()</code></li>\n<li><code>copy()</code></li>\n<li><code>move()</code></li>\n<li><code>remove()</code></li>\n<li><code>rename_on_folder()</code></li>\n<li><code>rename_on_folders()</code></li>\n<li><code>copy_to_folders()</code></li>\n</ul>\n\n<hr />\n"}, {"fullname": "aton.file.get", "modulename": "aton.file", "qualname": "get", "kind": "function", "doc": "<p>Check if the given <code>filepath</code> exists in the currrent working directory\nor in the full path, and returns its full path as a string.</p>\n\n<p>Raises an error if the file is not found, unless <code>return_anyway=True</code>,\nin which case it returns None. This can be used to personalize errors.</p>\n\n<p>If the provided string is a directory, it checks the files inside it.\nif there is only one file inside, it returns said file;\nif there are more files, it tries to filter them with the <code>filters</code> keyword(s) to return a single file.\nIf this fails, try using more strict filers to return a single file.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filepath</span>, </span><span class=\"param\"><span class=\"n\">filters</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">return_anyway</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "aton.file.get_list", "modulename": "aton.file", "qualname": "get_list", "kind": "function", "doc": "<p>Takes a <code>folder</code>, filters the content with the <code>filters</code> keyword(s) if provided, and returns a list with the matches.\nThe full paths are returned by default; to get only the base names, set <code>abspath=False</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">folder</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">filters</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">abspath</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "aton.file.copy", "modulename": "aton.file", "qualname": "copy", "kind": "function", "doc": "<p>Copies the content of <code>old</code> file to <code>new</code> file with shutil</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">old</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">new</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "aton.file.move", "modulename": "aton.file", "qualname": "move", "kind": "function", "doc": "<p>Moves <code>old</code> file to <code>new</code> file.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">old</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">new</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "aton.file.remove", "modulename": "aton.file", "qualname": "remove", "kind": "function", "doc": "<p>Removes the given file or folder at <code>filepath</code>.</p>\n\n<blockquote>\n  <p>WARNING: Removing stuff is always dangerous, be careful!</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filepath</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "aton.file.rename_on_folder", "modulename": "aton.file", "qualname": "rename_on_folder", "kind": "function", "doc": "<p>Batch renames files in the given <code>folder</code>, replacing <code>old</code> string by <code>new</code> string.\nIf no folder is provided, the current working directory is used.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">old</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">new</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">folder</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "aton.file.rename_on_folders", "modulename": "aton.file", "qualname": "rename_on_folders", "kind": "function", "doc": "<p>Renames the files inside the subfolders in the parent <code>folder</code>,\nfrom an <code>old</code> string to the <code>new</code> string.\nIf no <code>folder</code> is provided, the current working directory is used.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">old</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">new</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">folder</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "aton.file.copy_to_folders", "modulename": "aton.file", "qualname": "copy_to_folders", "kind": "function", "doc": "<p>Copies the files from the parent <code>folder</code> with the given <code>extension</code> to individual subfolders.\nThe subfolders are named as the original files,\nremoving the strings from the <code>strings_to_delete</code> list.\nIf no <code>folder</code> is provided, it runs in the current working directory.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">extension</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">strings_to_delete</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>, </span><span class=\"param\"><span class=\"n\">folder</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "aton.interface", "modulename": "aton.interface", "kind": "module", "doc": "<h1 id=\"ab-initio-interfaces\"><em>Ab-initio</em> interfaces</h1>\n\n<p>This module contains interfaces for several <em>ab-initio</em> calculation softwares.</p>\n\n<p>These interfaces can be easily expanded with the <code>aton.text</code> module.</p>\n\n<h2 id=\"quantum-espresso\">Quantum ESPRESSO</h2>\n\n<p>The interface <code>aton.interface.qe</code> can read and modify data\nfrom the <a href=\"https://www.quantum-espresso.org/Doc/INPUT_PW.html\">pw.x</a>\nmodule of <a href=\"https://www.quantum-espresso.org/\">Quantum ESPRESSO</a>.</p>\n\n<h2 id=\"phonopy\">Phonopy</h2>\n\n<p>The submodule <code>aton.interface.phonopy</code> is used to simplify the\ncalculation of phonon modes with <a href=\"https://phonopy.github.io/phonopy/\">Phonopy</a>,\nusing Quantum ESPRESSO as calculator.</p>\n\n<h2 id=\"castep\">CASTEP</h2>\n\n<p>The submodule <code>aton.interface.castep</code> is used\nto read <a href=\"http://www.castep.org/\">CASTEP</a> output files.</p>\n"}, {"fullname": "aton.interface.castep", "modulename": "aton.interface.castep", "kind": "module", "doc": "<h1 id=\"description\">Description</h1>\n\n<p>Functions to work with <a href=\"https://castep-docs.github.io/castep-docs/\">CASTEP</a> calculation files.</p>\n\n<h1 id=\"index\">Index</h1>\n\n<ul>\n<li><code>read_castep()</code></li>\n</ul>\n\n<hr />\n"}, {"fullname": "aton.interface.castep.read_castep", "modulename": "aton.interface.castep", "qualname": "read_castep", "kind": "function", "doc": "<p>Reads a CASTEP output file, specified in <code>filename</code>.\nReturns a dictionary with the following keys:\n<code>'Enthalpy'</code> (LBFGS: Final Enthalpy, in kJ/mol),\n<code>'Energy'</code> (Total energy corrected for finite basis set, in eV),\n<code>'Space group'</code>, <code>'Volume'</code> (Angstrom^3), <code>'Density'</code> (amu/Angstrom^3), <code>'Density_g'</code> (g/cm^3),\n<code>'A'</code>, <code>'B'</code>, <code>'C'</code> (Angstroms), <code>'Alpha'</code>, <code>'Beta'</code>, <code>'Gamma'</code> (Degrees).</p>\n\n<p>Note that these output keys start with a <strong>C</strong>apital letter.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "aton.interface.phonopy", "modulename": "aton.interface.phonopy", "kind": "module", "doc": "<h1 id=\"description\">Description</h1>\n\n<p>Functions to work with <a href=\"https://phonopy.github.io/phonopy/\">Phonopy</a> calculations,\nalong with <a href=\"https://www.quantum-espresso.org/\">Quantum ESPRESSO</a>.</p>\n\n<h1 id=\"index\">Index</h1>\n\n<p>The two main functions that you might want to use to run phonon calculations are:  </p>\n\n<ul>\n<li><code>make()</code> Build the supercell inputs.</li>\n<li><code>sbatch()</code> Sbatch'es the supercell calculations.</li>\n</ul>\n\n<p>The following functions are available for more control:  </p>\n\n<ul>\n<li><code>supercells_from_scf()</code></li>\n<li><code>scf_header_to_supercells()</code></li>\n<li><code>check_slurm_template()</code></li>\n</ul>\n\n<hr />\n"}, {"fullname": "aton.interface.phonopy.make", "modulename": "aton.interface.phonopy", "qualname": "make", "kind": "function", "doc": "<p>Starting on a given <code>folder</code> (CWD if none) from the <code>relax_in</code> and <code>relax_out</code> (default ones),\ncreates the supercells of a <code>dimension</code> (<code>2 2 2</code> by default)\nneeded for the Phonopy calculations with Quantum ESPRESSO.\nIt runs sequentially <code>thotpy.qe.scf_from_relax()</code>, <code>supercells_from_scf()</code> and <code>scf_header_to_supercells()</code>.\nFinally, it checks the <code>slurm_template</code> with <code>check_slurm_template()</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">dimension</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;2 2 2&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">folder</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">relax_in</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;relax.in&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">relax_out</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;relax.out&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">slurm_template</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;scf.slurm&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "aton.interface.phonopy.sbatch", "modulename": "aton.interface.phonopy", "qualname": "sbatch", "kind": "function", "doc": "<p>Launch all your supercell calculations to a cluster using a SLURM manager.\nRuns from a <code>folder</code> (CWD if empty), using a <code>slurm_template</code> (<code>scf.slurm</code> by default).</p>\n\n<p>If <code>testing=True</code> it skips the final sbatching, just printing the commands on the screen.</p>\n\n<p>The slurm template must contain the keywords\n<code>INPUT_FILE</code>, <code>OUTPUT_FILE</code>, and <code>JOB_NAME</code> in the following lines:</p>\n\n<pre><code>#SBATCH --job-name=JOB_NAME\nmpirun pw.x -inp INPUT_FILE &gt; OUTPUT_FILE\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">folder</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">slurm_template</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;scf.slurm&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">testing</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "aton.interface.phonopy.supercells_from_scf", "modulename": "aton.interface.phonopy", "qualname": "supercells_from_scf", "kind": "function", "doc": "<p>Creates supercells of a given <code>dimension</code> (<code>2 2 2</code> by default) inside a <code>folder</code>,\nfrom a Quantum ESPRESSO <code>scf</code> input (<code>scf.in</code> by default).</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">dimension</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;2 2 2&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">folder</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">scf</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;scf.in&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "aton.interface.phonopy.scf_header_to_supercells", "modulename": "aton.interface.phonopy", "qualname": "scf_header_to_supercells", "kind": "function", "doc": "<p>Paste the header from the <code>scf</code> file in <code>folder</code> to the supercells created by Phonopy.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">folder</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">scf</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;scf.in&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "aton.interface.phonopy.check_slurm_template", "modulename": "aton.interface.phonopy", "qualname": "check_slurm_template", "kind": "function", "doc": "<p>Check a <code>slurm_template</code> inside <code>folder</code>.\nThe current working directory is used if <code>folder</code> is not provided.\nIf the file does not exist or is invalid, creates a <code>scf_EXAMPLE.slurm</code> file for reference.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">folder</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">slurm_template</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;scf.slurm&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "aton.interface.qe", "modulename": "aton.interface.qe", "kind": "module", "doc": "<h1 id=\"description\">Description</h1>\n\n<p>Tools to work with the <a href=\"https://www.quantum-espresso.org/Doc/INPUT_PW.html\">pw.x</a> module from <a href=\"https://www.quantum-espresso.org/\">Quantum ESPRESSO</a>.</p>\n\n<h1 id=\"index\">Index</h1>\n\n<p>Functions to read inputs and outputs:  </p>\n\n<ul>\n<li><code>read_in()</code></li>\n<li><code>read_out()</code></li>\n<li><code>read_dir()</code></li>\n<li><code>read_dirs()</code></li>\n</ul>\n\n<p>Functions to manipulate and build custom input files:  </p>\n\n<ul>\n<li><code>set_value()</code></li>\n<li><code>add_atom()</code></li>\n<li><code>normalize_card()</code></li>\n<li><code>count_elements()</code></li>\n<li><code>scf_from_relax()</code></li>\n</ul>\n\n<p>Dictionaries with the input data description:  </p>\n\n<ul>\n<li><code>pw_namelists</code></li>\n<li><code>pw_cards</code></li>\n</ul>\n\n<hr />\n"}, {"fullname": "aton.interface.qe.read_in", "modulename": "aton.interface.qe", "qualname": "read_in", "kind": "function", "doc": "<p>Reads a Quantum ESPRESSO input <code>filepath</code> and returns the values as a dict.</p>\n\n<p>Dict keys are named after the corresponding variable.\nCARDS are returned as lists, and contain the\ntitle card + parameters in the first item.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filepath</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "aton.interface.qe.read_out", "modulename": "aton.interface.qe", "qualname": "read_out", "kind": "function", "doc": "<p>Reads a Quantum ESPRESSO output <code>filepath</code>, returns a dict with the output keys.</p>\n\n<p>The output keys are:\n<code>'Energy'</code> (Ry), <code>'Total force'</code> (float), <code>'Total SCF correction'</code> (float),\n<code>'Runtime'</code> (str), <code>'JOB DONE'</code> (bool), <code>'BFGS converged'</code> (bool), <code>'BFGS failed'</code> (bool),\n<code>'Maxiter reached'</code> (bool), <code>'Error'</code> (str), <code>'Success'</code> (bool), <code>'CELL_PARAMETERS_out'</code> (list of str), <code>'ATOMIC_POSITIONS_out'</code> (list of str), <code>'Alat'</code> (bohr), <code>'Volume'</code> (a.u.^3), <code>'Density'</code> (g/cm^3).</p>\n\n<p>Note that these output keys start with a <strong>C</strong>apital letter.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filepath</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "aton.interface.qe.read_dir", "modulename": "aton.interface.qe", "qualname": "read_dir", "kind": "function", "doc": "<p>Takes a <code>folder</code> from a QE calculation, returns a dict with input and output values.</p>\n\n<p>Input and output files are determined automatically,\nbut must be specified with <code>in_str</code> and <code>out_str</code>\nif more than one file ends with <code>.in</code> or <code>.out</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">folder</span>, </span><span class=\"param\"><span class=\"n\">in_str</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;.in&#39;</span>, </span><span class=\"param\"><span class=\"n\">out_str</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;.out&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "aton.interface.qe.read_dirs", "modulename": "aton.interface.qe", "qualname": "read_dirs", "kind": "function", "doc": "<p>Reads recursively QE calculations from all the subfolders inside the given <code>directory</code>.</p>\n\n<p>Results are saved to CSV files inside the current directory.\nInput and output files are determined automatically, but must be specified with\n<code>in_str</code> and <code>out_str</code> if more than one file ends with <code>.in</code> or <code>.out</code>.</p>\n\n<p>To properly group the calculations per type, saving separated CSVs for each calculation type,\nyou can modify <code>calc_splitter</code> ('_' by default), <code>calc_type_index</code> (0) and <code>calc_id_index</code> (1).\nWith these default values, a subfolder named './CalculationType_CalculationID_AdditionalText/'\nwill be interpreted as follows:</p>\n\n<ul>\n<li>Calculation type: 'CalculationType' (The output CSV will be named after this)</li>\n<li>CalculationID: 'CalculationID' (Stored in the 'ID' column of the resulting dataframe)</li>\n</ul>\n\n<p>If everything fails, the subfolder name will be used for the CSV file.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">directory</span>,</span><span class=\"param\">\t<span class=\"n\">in_str</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;.in&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">out_str</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;.out&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">calc_splitter</span><span class=\"o\">=</span><span class=\"s1\">&#39;_&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">calc_type_index</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">calc_id_index</span><span class=\"o\">=</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "aton.interface.qe.set_value", "modulename": "aton.interface.qe", "qualname": "set_value", "kind": "function", "doc": "<p>Replace the <code>value</code> of a <code>key</code> parameter in an input <code>filepath</code>.</p>\n\n<p>Delete parameters with <code>value=''</code>.\nRemember to include the single quotes <code>'</code> on values that use them.</p>\n\n<p>Updating 'ATOMIC_POSITIONS' updates 'nat' automatically,\nand updating 'ATOMIC_SPECIES' updates 'ntyp'.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filepath</span>, </span><span class=\"param\"><span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">value</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "aton.interface.qe.add_atom", "modulename": "aton.interface.qe", "qualname": "add_atom", "kind": "function", "doc": "<p>Adds an atom in a given <code>filepath</code> at a specified <code>position</code>.</p>\n\n<p>Position must be a string or a list, as follows:</p>\n\n<p><code>\"specie:str float float float\"</code> or <code>[specie:str, float, float, float]</code></p>\n\n<p>This method updates automatically 'ntyp' and 'nat'.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filepath</span>, </span><span class=\"param\"><span class=\"n\">position</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "aton.interface.qe.normalize_card", "modulename": "aton.interface.qe", "qualname": "normalize_card", "kind": "function", "doc": "<p>Take a matched card, and return it in a normalised format.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">card</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "aton.interface.qe.count_elements", "modulename": "aton.interface.qe", "qualname": "count_elements", "kind": "function", "doc": "<p>Takes ATOMIC_POSITIONS, returns a dict as <code>{element : number of atoms}</code></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">atomic_positions</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "aton.interface.qe.scf_from_relax", "modulename": "aton.interface.qe", "qualname": "scf_from_relax", "kind": "function", "doc": "<p>Create a Quantum ESPRESSO <code>scf.in</code> file from a previous relax calculation.</p>\n\n<p>If no <code>folder</code> is provided, the current working directory is used.\nThe <code>relax_in</code> and <code>relax_out</code> files by default are <code>relax.in</code> and <code>relax.out</code>,\nupdate the names if necessary.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">folder</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">relax_in</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;relax.in&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">relax_out</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;relax.out&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "aton.interface.qe.pw_namelists", "modulename": "aton.interface.qe", "qualname": "pw_namelists", "kind": "variable", "doc": "<p>Dictionary with all possible NAMELISTs as keys, and the corresponding variables as values.</p>\n", "default_value": "{&#x27;&amp;CONTROL&#x27;: [&#x27;calculation&#x27;, &#x27;title&#x27;, &#x27;verbosity&#x27;, &#x27;restart_mode&#x27;, &#x27;wf_collect&#x27;, &#x27;nstep&#x27;, &#x27;iprint&#x27;, &#x27;tstress&#x27;, &#x27;tprnfor&#x27;, &#x27;dt&#x27;, &#x27;outdir&#x27;, &#x27;wfcdir&#x27;, &#x27;prefix&#x27;, &#x27;lkpoint_dir&#x27;, &#x27;max_seconds&#x27;, &#x27;etot_conv_thr&#x27;, &#x27;forc_conv_thr&#x27;, &#x27;disk_io&#x27;, &#x27;pseudo_dir&#x27;, &#x27;tefield&#x27;, &#x27;dipfield&#x27;, &#x27;lelfield&#x27;, &#x27;nberrycyc&#x27;, &#x27;lorbm&#x27;, &#x27;lberry&#x27;, &#x27;gdir&#x27;, &#x27;nppstr&#x27;, &#x27;gate&#x27;, &#x27;twochem&#x27;, &#x27;lfcp&#x27;, &#x27;trism&#x27;], &#x27;&amp;SYSTEM&#x27;: [&#x27;ibrav&#x27;, &#x27;celldm(1)&#x27;, &#x27;celldm(2)&#x27;, &#x27;celldm(3)&#x27;, &#x27;celldm(4)&#x27;, &#x27;celldm(5)&#x27;, &#x27;celldm(6)&#x27;, &#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;, &#x27;cosAB&#x27;, &#x27;cosAC&#x27;, &#x27;cosBC&#x27;, &#x27;nat&#x27;, &#x27;ntyp&#x27;, &#x27;nbnd&#x27;, &#x27;nbnd_cond&#x27;, &#x27;tot_charge&#x27;, &#x27;starting_charge&#x27;, &#x27;tot_magnetization&#x27;, &#x27;starting_magnetization&#x27;, &#x27;ecutwfc&#x27;, &#x27;ecutrho&#x27;, &#x27;ecutfock&#x27;, &#x27;nr1&#x27;, &#x27;nr2&#x27;, &#x27;nr3&#x27;, &#x27;nr1s&#x27;, &#x27;nr2s&#x27;, &#x27;nr3s&#x27;, &#x27;nosym&#x27;, &#x27;nosym_evc&#x27;, &#x27;noinv&#x27;, &#x27;no_t_rev&#x27;, &#x27;force_symmorphic&#x27;, &#x27;use_all_frac&#x27;, &#x27;occupations&#x27;, &#x27;one_atom_occupations&#x27;, &#x27;starting_spin_angle&#x27;, &#x27;degauss_cond&#x27;, &#x27;nelec_cond&#x27;, &#x27;degauss&#x27;, &#x27;smearing&#x27;, &#x27;nspin&#x27;, &#x27;sic_gamma&#x27;, &#x27;pol_type&#x27;, &#x27;sic_energy&#x27;, &#x27;sci_vb&#x27;, &#x27;sci_cb&#x27;, &#x27;noncolin&#x27;, &#x27;ecfixed&#x27;, &#x27;qcutz&#x27;, &#x27;q2sigma&#x27;, &#x27;input_dft&#x27;, &#x27;ace&#x27;, &#x27;exx_fraction&#x27;, &#x27;screening_parameter&#x27;, &#x27;exxdiv_treatment&#x27;, &#x27;x_gamma_extrapolation&#x27;, &#x27;ecutvcutnqx1&#x27;, &#x27;nqx2&#x27;, &#x27;nqx3&#x27;, &#x27;localization_thr&#x27;, &#x27;Hubbard_occ&#x27;, &#x27;Hubbard_alpha&#x27;, &#x27;Hubbard_beta&#x27;, &#x27;starting_ns_eigenvalue&#x27;, &#x27;dmft&#x27;, &#x27;dmft_prefix&#x27;, &#x27;ensemble_energies&#x27;, &#x27;edir&#x27;, &#x27;emaxpos&#x27;, &#x27;eopreg&#x27;, &#x27;eamp&#x27;, &#x27;angle1&#x27;, &#x27;angle2&#x27;, &#x27;lforcet&#x27;, &#x27;constrained_magnetization&#x27;, &#x27;fixed_magnetization&#x27;, &#x27;lambda&#x27;, &#x27;report&#x27;, &#x27;lspinorb&#x27;, &#x27;assume_isolated&#x27;, &#x27;esm_bc&#x27;, &#x27;esm_w&#x27;, &#x27;esm_efield&#x27;, &#x27;esm_nfit&#x27;, &#x27;lgcscf&#x27;, &#x27;gcscf_mu&#x27;, &#x27;gcscf_conv_thr&#x27;, &#x27;gcscf_beta&#x27;, &#x27;vdw_corr&#x27;, &#x27;london&#x27;, &#x27;london_s6&#x27;, &#x27;london_c6&#x27;, &#x27;london_rvdw&#x27;, &#x27;london_rcut&#x27;, &#x27;dftd3_version&#x27;, &#x27;dftd3_threebody&#x27;, &#x27;ts_vdw_econv_thr&#x27;, &#x27;ts_vdw_isolated&#x27;, &#x27;xdm&#x27;, &#x27;xdm_a1&#x27;, &#x27;xdm_a2&#x27;, &#x27;space_group&#x27;, &#x27;uniqueb&#x27;, &#x27;origin_choice&#x27;, &#x27;rhombohedral&#x27;, &#x27;zgate&#x27;, &#x27;relaxz&#x27;, &#x27;block&#x27;, &#x27;block_1&#x27;, &#x27;block_2&#x27;, &#x27;block_height&#x27;, &#x27;nextffield&#x27;], &#x27;&amp;ELECTRONS&#x27;: [&#x27;electron_maxstep&#x27;, &#x27;exx_maxstep&#x27;, &#x27;scf_must_converge&#x27;, &#x27;conv_thr&#x27;, &#x27;adaptive_thr&#x27;, &#x27;conv_thr_init&#x27;, &#x27;conv_thr_multi&#x27;, &#x27;mixing_mode&#x27;, &#x27;mixing_beta&#x27;, &#x27;mixing_ndim&#x27;, &#x27;mixing_fixed_ns&#x27;, &#x27;diagonalization&#x27;, &#x27;diago_thr_init&#x27;, &#x27;diago_cg_maxiter&#x27;, &#x27;diago_ppcg_maxiter&#x27;, &#x27;diago_david_ndim&#x27;, &#x27;diago_rmm_ndim&#x27;, &#x27;diago_rmm_conv&#x27;, &#x27;diago_gs_nblock&#x27;, &#x27;diago_full_acc&#x27;, &#x27;efield&#x27;, &#x27;efield_cart&#x27;, &#x27;efield_phase&#x27;, &#x27;startingpot&#x27;, &#x27;startingwfc&#x27;, &#x27;tqr&#x27;, &#x27;real_space&#x27;], &#x27;&amp;IONS&#x27;: [&#x27;ion_positions&#x27;, &#x27;ion_velocities&#x27;, &#x27;ion_dynamics&#x27;, &#x27;pot_extrapolation&#x27;, &#x27;wfc_extrapolation&#x27;, &#x27;remove_rigid_rot&#x27;, &#x27;ion_temperature&#x27;, &#x27;tempw&#x27;, &#x27;tolp&#x27;, &#x27;delta_t&#x27;, &#x27;nraise&#x27;, &#x27;refold_pos&#x27;, &#x27;upscale&#x27;, &#x27;bfgs_ndim&#x27;, &#x27;trust_radius_max&#x27;, &#x27;trust_radius_min&#x27;, &#x27;trust_radius_ini&#x27;, &#x27;w_1&#x27;, &#x27;w_2&#x27;, &#x27;fire_alpha_init&#x27;, &#x27;fire_falpha&#x27;, &#x27;fire_nmin&#x27;, &#x27;fire_f_inc&#x27;, &#x27;fire_f_dec&#x27;, &#x27;fire_dtmax&#x27;], &#x27;&amp;CELL&#x27;: [&#x27;cell_dynamics&#x27;, &#x27;press&#x27;, &#x27;wmass&#x27;, &#x27;cell_factor&#x27;, &#x27;press_conv_thrcell_dofree&#x27;], &#x27;&amp;FCP&#x27;: [&#x27;fcp_mu&#x27;, &#x27;fcp_dynamics&#x27;, &#x27;fcp_conv_thr&#x27;, &#x27;fcp_ndiis&#x27;, &#x27;fcp_mass&#x27;, &#x27;fcp_velocity&#x27;, &#x27;fcp_temperature&#x27;, &#x27;fcp_tempw&#x27;, &#x27;fcp_tolp &#x27;, &#x27;fcp_delta_t&#x27;, &#x27;fcp_nraise&#x27;, &#x27;freeze_all_atoms&#x27;], &#x27;&amp;RISM&#x27;: [&#x27;nsolv&#x27;, &#x27;closure&#x27;, &#x27;tempv&#x27;, &#x27;ecutsolv&#x27;, &#x27;solute_lj&#x27;, &#x27;solute_epsilon&#x27;, &#x27;solute_sigma&#x27;, &#x27;starting1d&#x27;, &#x27;starting3d&#x27;, &#x27;smear1d&#x27;, &#x27;smear3d&#x27;, &#x27;rism1d_maxstep&#x27;, &#x27;rism3d_maxstep&#x27;, &#x27;rism1d_conv_thr&#x27;, &#x27;rism3d_conv_thr&#x27;, &#x27;mdiis1d_size&#x27;, &#x27;mdiis3d_size&#x27;, &#x27;mdiis1d_step&#x27;, &#x27;mdiis3d_step&#x27;, &#x27;rism1d_bond_width&#x27;, &#x27;rism1d_dielectric&#x27;, &#x27;rism1d_molesize&#x27;, &#x27;rism1d_nproc&#x27;, &#x27;rism3d_conv_level&#x27;, &#x27;rism3d_planar_average&#x27;, &#x27;laue_nfit&#x27;, &#x27;laue_expand_right&#x27;, &#x27;laue_expand_left&#x27;, &#x27;laue_starting_right&#x27;, &#x27;laue_starting_left&#x27;, &#x27;laue_buffer_right&#x27;, &#x27;laue_buffer_left&#x27;, &#x27;laue_both_hands&#x27;, &#x27;laue_wall&#x27;, &#x27;laue_wall_z&#x27;, &#x27;laue_wall_rho&#x27;, &#x27;laue_wall_epsilon&#x27;, &#x27;laue_wall_sigma&#x27;, &#x27;laue_wall_lj6&#x27;]}"}, {"fullname": "aton.interface.qe.pw_cards", "modulename": "aton.interface.qe", "qualname": "pw_cards", "kind": "variable", "doc": "<p>Dictionary with every possible CARDs as keys, and the corresponding variables as values.</p>\n", "default_value": "{&#x27;ATOMIC_SPECIES&#x27;: [&#x27;X&#x27;, &#x27;Mass_X&#x27;, &#x27;PseudoPot_X&#x27;], &#x27;ATOMIC_POSITIONS&#x27;: [&#x27;X&#x27;, &#x27;x&#x27;, &#x27;y&#x27;, &#x27;z&#x27;, &#x27;if_pos(1)&#x27;, &#x27;if_pos(2)&#x27;, &#x27;if_pos(3)&#x27;], &#x27;K_POINTS&#x27;: [&#x27;nks&#x27;, &#x27;xk_x&#x27;, &#x27;xk_y&#x27;, &#x27;xk_z&#x27;, &#x27;wk&#x27;, &#x27;nk1&#x27;, &#x27;nk2&#x27;, &#x27;nk3&#x27;, &#x27;sk1&#x27;, &#x27;sk2&#x27;, &#x27;sk3&#x27;], &#x27;ADDITIONAL_K_POINTS&#x27;: [&#x27;nks_add&#x27;, &#x27;k_x&#x27;, &#x27;k_y&#x27;, &#x27;k_z&#x27;, &#x27;wk_&#x27;], &#x27;CELL_PARAMETERS&#x27;: [&#x27;v1&#x27;, &#x27;v2&#x27;, &#x27;v3&#x27;], &#x27;CONSTRAINTS&#x27;: [&#x27;nconstr&#x27;, &#x27;constr_tol&#x27;, &#x27;constr_type&#x27;, &#x27;constr(1)&#x27;, &#x27;constr(2)&#x27;, &#x27;constr(3)&#x27;, &#x27;constr(4)&#x27;, &#x27;constr_target&#x27;], &#x27;OCCUPATIONS&#x27;: [&#x27;f_inp1&#x27;, &#x27;f_inp2&#x27;], &#x27;ATOMIC_VELOCITIES&#x27;: [&#x27;V&#x27;, &#x27;vx&#x27;, &#x27;vy&#x27;, &#x27;vz&#x27;], &#x27;ATOMIC_FORCES&#x27;: [&#x27;X&#x27;, &#x27;fx&#x27;, &#x27;fy&#x27;, &#x27;fz&#x27;], &#x27;SOLVENTS&#x27;: [&#x27;X&#x27;, &#x27;Density&#x27;, &#x27;Molecule&#x27;, &#x27;X&#x27;, &#x27;Density_Left&#x27;, &#x27;Density_Right&#x27;, &#x27;Molecule&#x27;], &#x27;HUBBARD&#x27;: [&#x27;label(1)-manifold(1)&#x27;, &#x27;u_val(1)&#x27;, &#x27;label(1)-manifold(1)&#x27;, &#x27;j0_val(1)&#x27;, &#x27;paramType(1)&#x27;, &#x27;label(1)-manifold(1)&#x27;, &#x27;paramValue(1)&#x27;, &#x27;label(I)-manifold(I)&#x27;, &#x27;u_val(I)&#x27;, &#x27;label(I)-manifold(I)&#x27;, &#x27;j0_val(I)&#x27;, &#x27;label(I)-manifold(I)&#x27;, &#x27;label(J)-manifold(J)&#x27;, &#x27;I&#x27;, &#x27;J&#x27;, &#x27;v_val(I,J)&#x27;]}"}, {"fullname": "aton.spectra", "modulename": "aton.spectra", "kind": "module", "doc": "<h1 id=\"description\">Description</h1>\n\n<p>This module contains spectral analysis tools.</p>\n\n<h1 id=\"index\">Index</h1>\n\n<ul>\n<li><code>aton.spectra.classes</code></li>\n<li><code>aton.spectra.fit</code></li>\n<li><code>aton.spectra.normalize</code></li>\n<li><code>aton.spectra.deuterium</code></li>\n<li><code>aton.spectra.samples</code></li>\n<li><code>aton.spectra.plot</code></li>\n</ul>\n"}, {"fullname": "aton.spectra.classes", "modulename": "aton.spectra.classes", "kind": "module", "doc": "<h1 id=\"description\">Description</h1>\n\n<p>This module contains common classes used to load and manipulate spectral data.\nAny class can be instantiated directly from the <code>aton.spectra</code> module;\nfor example, to create a new <code>Spectra</code> class for your data,\nyou just need to call <code>aton.spectra.Spectra(options)</code> as described below:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">aton</span>\n<span class=\"n\">ins</span> <span class=\"o\">=</span> <span class=\"n\">aton</span><span class=\"o\">.</span><span class=\"n\">spectra</span><span class=\"o\">.</span><span class=\"n\">Spectra</span><span class=\"p\">(</span>\n    <span class=\"c1\"># Options here</span>\n    <span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<h1 id=\"index\">Index</h1>\n\n<ul>\n<li><code>Spectra</code>. Used to load and process spectral data.</li>\n<li><code>Plotting</code>. Stores plotting options. Used inside <code>Spectra.plotting</code>.</li>\n<li><code>Scaling</code>. Handles data normalization inside the specified range of values. Used inside <code>Spectra.scaling</code>.</li>\n<li><code>Material</code>. Used to store and calculate material parameters, such as molar masses and cross sections.</li>\n</ul>\n\n<hr />\n"}, {"fullname": "aton.spectra.classes.Plotting", "modulename": "aton.spectra.classes", "qualname": "Plotting", "kind": "class", "doc": "<p>Stores plotting options.\nRead by <code>aton.spectra.plot</code>.</p>\n"}, {"fullname": "aton.spectra.classes.Plotting.__init__", "modulename": "aton.spectra.classes", "qualname": "Plotting.__init__", "kind": "function", "doc": "<p>Default values can be overwritten when initializing the Plotting object.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">title</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">xlim</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">ylim</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">margins</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">offset</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">normalize</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">vline</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">vline_error</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">figsize</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">log_xscale</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">show_yticks</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">xlabel</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">ylabel</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">legend</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">legend_title</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">legend_size</span><span class=\"o\">=</span><span class=\"s1\">&#39;medium&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">legend_loc</span><span class=\"o\">=</span><span class=\"s1\">&#39;best&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">save_as</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "aton.spectra.classes.Plotting.title", "modulename": "aton.spectra.classes", "qualname": "Plotting.title", "kind": "variable", "doc": "<p>Title of the plot. Set it to an empty string to remove the title.</p>\n"}, {"fullname": "aton.spectra.classes.Plotting.xlim", "modulename": "aton.spectra.classes", "qualname": "Plotting.xlim", "kind": "variable", "doc": "<p>List with the x-limits of the plot, as in <code>[xlim_low, xlim_top]</code>.</p>\n"}, {"fullname": "aton.spectra.classes.Plotting.ylim", "modulename": "aton.spectra.classes", "qualname": "Plotting.ylim", "kind": "variable", "doc": "<p>List with the y-limits of the plot, as in <code>[ylim_low, ylim_top]</code>.</p>\n"}, {"fullname": "aton.spectra.classes.Plotting.margins", "modulename": "aton.spectra.classes", "qualname": "Plotting.margins", "kind": "variable", "doc": "<p>List with additional margins at the bottom and top of the plot, as in <code>[low_margin, top_margin]</code>.</p>\n"}, {"fullname": "aton.spectra.classes.Plotting.offset", "modulename": "aton.spectra.classes", "qualname": "Plotting.offset", "kind": "variable", "doc": "<p>If <code>True</code>, the plots will be separated automatically.\nIt can be set to a float, to equally offset the plots by a given value.</p>\n"}, {"fullname": "aton.spectra.classes.Plotting.normalize", "modulename": "aton.spectra.classes", "qualname": "Plotting.normalize", "kind": "variable", "doc": "<p>Normalize or not the plotted spectra.\n<code>True</code> or <code>'y'</code> or <code>'Y'</code> to normalize the heights, <code>'area'</code> or <code>'a'</code> or <code>'A'</code> to normalize the areas.</p>\n"}, {"fullname": "aton.spectra.classes.Plotting.vline", "modulename": "aton.spectra.classes", "qualname": "Plotting.vline", "kind": "variable", "doc": "<p>Vertical line/s to plot. Can be an int or float with the x-position, or a list with several ones.</p>\n"}, {"fullname": "aton.spectra.classes.Plotting.vline_error", "modulename": "aton.spectra.classes", "qualname": "Plotting.vline_error", "kind": "variable", "doc": "<p>If not <code>None</code>, it will plot a shaded area of the specified width around the vertical lines specified at <code>vline</code>.\nIt can be an array of the same length as <code>vline</code>, or a single value to be applied to all.</p>\n"}, {"fullname": "aton.spectra.classes.Plotting.figsize", "modulename": "aton.spectra.classes", "qualname": "Plotting.figsize", "kind": "variable", "doc": "<p>Tuple with the figure size, as in matplotlib.</p>\n"}, {"fullname": "aton.spectra.classes.Plotting.log_xscale", "modulename": "aton.spectra.classes", "qualname": "Plotting.log_xscale", "kind": "variable", "doc": "<p>If true, plot the x-axis in logarithmic scale.</p>\n"}, {"fullname": "aton.spectra.classes.Plotting.show_yticks", "modulename": "aton.spectra.classes", "qualname": "Plotting.show_yticks", "kind": "variable", "doc": "<p>Show or not the yticks on the plot.</p>\n"}, {"fullname": "aton.spectra.classes.Plotting.xlabel", "modulename": "aton.spectra.classes", "qualname": "Plotting.xlabel", "kind": "variable", "doc": "<p>Custom label of the x-axis. If <code>None</code>, the default label will be used.\nSet to <code>''</code> to remove the label of the horizontal axis.</p>\n"}, {"fullname": "aton.spectra.classes.Plotting.ylabel", "modulename": "aton.spectra.classes", "qualname": "Plotting.ylabel", "kind": "variable", "doc": "<p>Label of the y-axis. If <code>None</code>, the default label will be used.\nSet to <code>''</code> to remove the label of the vertical axis.</p>\n"}, {"fullname": "aton.spectra.classes.Plotting.legend", "modulename": "aton.spectra.classes", "qualname": "Plotting.legend", "kind": "variable", "doc": "<p>If <code>None</code>, the files will be used as legend.\nCan be a bool to show or hide the plot legend.\nIt can also be an array containing the strings to display;\nin that case, elements set to <code>False</code> will not be displayed.</p>\n"}, {"fullname": "aton.spectra.classes.Plotting.legend_title", "modulename": "aton.spectra.classes", "qualname": "Plotting.legend_title", "kind": "variable", "doc": "<p>Title of the legend. Defaults to <code>None</code>.</p>\n"}, {"fullname": "aton.spectra.classes.Plotting.legend_size", "modulename": "aton.spectra.classes", "qualname": "Plotting.legend_size", "kind": "variable", "doc": "<p>Size of the legend, as in matplotlib. Defaults to <code>'medium'</code>.</p>\n"}, {"fullname": "aton.spectra.classes.Plotting.legend_loc", "modulename": "aton.spectra.classes", "qualname": "Plotting.legend_loc", "kind": "variable", "doc": "<p>Location of the legend, as in matplotlib. Defaults to <code>'best'</code>.</p>\n"}, {"fullname": "aton.spectra.classes.Plotting.save_as", "modulename": "aton.spectra.classes", "qualname": "Plotting.save_as", "kind": "variable", "doc": "<p>Filename to save the plot. None by default.</p>\n"}, {"fullname": "aton.spectra.classes.Scaling", "modulename": "aton.spectra.classes", "qualname": "Scaling", "kind": "class", "doc": "<p>The Scaling object is used to handle the normalization\nof the data inside the specified x-range,\nto the same heigth as in the specified <code>index</code> dataset\n(the first one by default).</p>\n\n<p>Custom heights can be normalized with <code>ymin</code> and <code>ymax</code>,\noverriding the x-values.\nFor example, you may want to normalize two spectra datasets\nwith respect to the height of a given peak that overlaps with another.\nThose peaks may have ymin values of 2 and 3, and ymax values\nof 50 and 60 respectively. In that case:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">spectra</span><span class=\"o\">.</span><span class=\"n\">scaling</span> <span class=\"o\">=</span> <span class=\"n\">Scaling</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">ymin</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"n\">ymax</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"mi\">60</span><span class=\"p\">])</span>\n</code></pre>\n</div>\n\n<p>To normalize when plotting with <code>aton.spectra.plot(Spectra)</code>,\nremember to set <code>Plotting.normalize=True</code>.</p>\n\n<p>When normalizing the plot, all datasets are fitted inside the\nplotting window, scaling over the entire data range into view.\nTo override this behaviour and expand over the given range\nto fill the plot window, you can set <code>Scaling.zoom=True</code>.\nThis zoom setting can also be enabled without normalizing the plot,\nresulting in a zoom over the given range so that the <code>index</code> dataset\nfits the full plotting window, scaling the rest of the set accordingly.</p>\n"}, {"fullname": "aton.spectra.classes.Scaling.__init__", "modulename": "aton.spectra.classes", "qualname": "Scaling.__init__", "kind": "function", "doc": "<p>All values can be set when initializing the Scaling object.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">index</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">xmin</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">xmax</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">ymin</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">ymax</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">zoom</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span>)</span>"}, {"fullname": "aton.spectra.classes.Scaling.index", "modulename": "aton.spectra.classes", "qualname": "Scaling.index", "kind": "variable", "doc": "<p>Index of the dataframe to use as reference.</p>\n", "annotation": ": int"}, {"fullname": "aton.spectra.classes.Scaling.xmin", "modulename": "aton.spectra.classes", "qualname": "Scaling.xmin", "kind": "variable", "doc": "<p>Minimum x-value to start normalizing the plots.</p>\n", "annotation": ": float"}, {"fullname": "aton.spectra.classes.Scaling.xmax", "modulename": "aton.spectra.classes", "qualname": "Scaling.xmax", "kind": "variable", "doc": "<p>Maximum x-value to normalize the plots.</p>\n", "annotation": ": float"}, {"fullname": "aton.spectra.classes.Scaling.ymin", "modulename": "aton.spectra.classes", "qualname": "Scaling.ymin", "kind": "variable", "doc": "<p>List with minimum y-values to normalize the plots.</p>\n", "annotation": ": list"}, {"fullname": "aton.spectra.classes.Scaling.ymax", "modulename": "aton.spectra.classes", "qualname": "Scaling.ymax", "kind": "variable", "doc": "<p>List with minimum y-values to normalize the plots.\nIf <code>Plotting.normalize=True</code>, the plots are normalized according to the y-values provided.</p>\n", "annotation": ": list"}, {"fullname": "aton.spectra.classes.Scaling.zoom", "modulename": "aton.spectra.classes", "qualname": "Scaling.zoom", "kind": "variable", "doc": "<p>Used when plotting with <code>maatpy.plot.spectra()</code>.\nIf true, the data inside the range is scaled up to fit the entire plotting window.</p>\n", "annotation": ": bool"}, {"fullname": "aton.spectra.classes.Scaling.set_x", "modulename": "aton.spectra.classes", "qualname": "Scaling.set_x", "kind": "function", "doc": "<p>Override with an horizontal range.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">xmin</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">xmax</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "aton.spectra.classes.Scaling.set_y", "modulename": "aton.spectra.classes", "qualname": "Scaling.set_y", "kind": "function", "doc": "<p>Override with a vertical range.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">ymin</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">ymax</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "aton.spectra.classes.Spectra", "modulename": "aton.spectra.classes", "qualname": "Spectra", "kind": "class", "doc": "<p>Spectra object. Used to load and process spectral data.</p>\n\n<p>Most functions present in the <code>atom.spectra</code> module receive this object as input.</p>\n\n<p><strong>Use example:</strong> to load two INS spectra CSV files from MANTID with cm$^{-1}$ as input units,\nand plot them in meV units, normalizing their heights over the range from 20 to 50 meV:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">maatpy</span> <span class=\"k\">as</span> <span class=\"nn\">mt</span>\n<span class=\"n\">ins</span> <span class=\"o\">=</span> <span class=\"n\">mt</span><span class=\"o\">.</span><span class=\"n\">Spectra</span><span class=\"p\">(</span>\n    <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"s1\">&#39;INS&#39;</span><span class=\"p\">,</span>\n    <span class=\"n\">files</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;example_1.csv&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;example_2.csv&#39;</span><span class=\"p\">],</span>\n    <span class=\"n\">units_in</span><span class=\"o\">=</span><span class=\"s1\">&#39;cm-1&#39;</span><span class=\"p\">,</span>\n    <span class=\"n\">units</span><span class=\"o\">=</span><span class=\"s1\">&#39;meV&#39;</span><span class=\"p\">,</span>\n    <span class=\"n\">plotting</span><span class=\"o\">=</span><span class=\"n\">mt</span><span class=\"o\">.</span><span class=\"n\">Plotting</span><span class=\"p\">(</span>\n        <span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s1\">&#39;Calculated INS&#39;</span><span class=\"p\">,</span>\n        <span class=\"n\">normalize</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"p\">),</span>\n    <span class=\"n\">scaling</span><span class=\"o\">=</span><span class=\"n\">mt</span><span class=\"o\">.</span><span class=\"n\">Scaling</span><span class=\"p\">(</span>\n        <span class=\"n\">xmin</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">,</span>\n        <span class=\"n\">xmax</span><span class=\"o\">=</span><span class=\"mi\">50</span><span class=\"p\">,</span>\n        <span class=\"p\">),</span>\n    <span class=\"p\">)</span>\n<span class=\"n\">mt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"o\">.</span><span class=\"n\">spectra</span><span class=\"p\">(</span><span class=\"n\">ins</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>Check more use examples in the <code>/examples/</code> folder.</p>\n\n<p>Below is a list of the available parameters for the Spectra object, along with their descriptions.</p>\n"}, {"fullname": "aton.spectra.classes.Spectra.__init__", "modulename": "aton.spectra.classes", "qualname": "Spectra.__init__", "kind": "function", "doc": "<p>All values can be set when initializing the Spectra object.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"nb\">type</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">comment</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">files</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">dfs</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">units</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">units_in</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">plotting</span><span class=\"p\">:</span> <span class=\"n\">aton</span><span class=\"o\">.</span><span class=\"n\">spectra</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">Plotting</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">aton</span><span class=\"o\">.</span><span class=\"n\">spectra</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">Plotting</span> <span class=\"nb\">object</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">scaling</span><span class=\"p\">:</span> <span class=\"n\">aton</span><span class=\"o\">.</span><span class=\"n\">spectra</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">Scaling</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">aton</span><span class=\"o\">.</span><span class=\"n\">spectra</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">Scaling</span> <span class=\"nb\">object</span><span class=\"o\">&gt;</span></span>)</span>"}, {"fullname": "aton.spectra.classes.Spectra.type", "modulename": "aton.spectra.classes", "qualname": "Spectra.type", "kind": "variable", "doc": "<p>Type of the spectra: <code>'INS'</code>, <code>'ATR'</code>, or <code>'RAMAN'</code>.</p>\n"}, {"fullname": "aton.spectra.classes.Spectra.comment", "modulename": "aton.spectra.classes", "qualname": "Spectra.comment", "kind": "variable", "doc": "<p>Custom comment. If <code>Plotting.title</code> is None,  it will be the title of the plot.</p>\n"}, {"fullname": "aton.spectra.classes.Spectra.files", "modulename": "aton.spectra.classes", "qualname": "Spectra.files", "kind": "variable", "doc": "<p>List containing the files with the spectral data.\nLoaded automatically with Pandas at initialization.\nIn order for Pandas to read the files properly, note that the column lines must start by <code>#</code>.\nAny additional line that is not data must be removed or commented with <code>#</code>.\nCSV files must be formatted with the first column as the energy or energy transfer,\nand the second column with the intensity or absorbance, depending on the case. An additional third <code>'Error'</code> column can be used.</p>\n"}, {"fullname": "aton.spectra.classes.Spectra.dfs", "modulename": "aton.spectra.classes", "qualname": "Spectra.dfs", "kind": "variable", "doc": "<p>List containing the pandas dataframes with the spectral data.\nLoaded automatically from the files at initialization.</p>\n"}, {"fullname": "aton.spectra.classes.Spectra.units", "modulename": "aton.spectra.classes", "qualname": "Spectra.units", "kind": "variable", "doc": "<p>Target units of the spectral data. Can be <code>'meV'</code> or <code>'cm-1'</code>, written as any of the variants listed in <code>aton.alias.units[unit]</code>.</p>\n"}, {"fullname": "aton.spectra.classes.Spectra.units_in", "modulename": "aton.spectra.classes", "qualname": "Spectra.units_in", "kind": "variable", "doc": "<p>Input units of the spectral data, used in the input CSV files. Can be <code>'meV'</code> or <code>'cm-1'</code>, written as any of the variants listed in <code>aton.alias.units[unit]</code>.\nIf the input CSV files have different units, it can also be set as a list of the same length of the number of input files, eg. <code>['meV', 'cm-1', 'cm-1']</code>.</p>\n"}, {"fullname": "aton.spectra.classes.Spectra.plotting", "modulename": "aton.spectra.classes", "qualname": "Spectra.plotting", "kind": "variable", "doc": "<p><code>Plotting</code> object, used to set the plotting options.</p>\n"}, {"fullname": "aton.spectra.classes.Spectra.scaling", "modulename": "aton.spectra.classes", "qualname": "Spectra.scaling", "kind": "variable", "doc": "<p><code>Scaling</code> object, used to set the normalization parameters.</p>\n"}, {"fullname": "aton.spectra.classes.Spectra.set_units", "modulename": "aton.spectra.classes", "qualname": "Spectra.set_units", "kind": "function", "doc": "<p>Method to change between spectral units. ALWAYS use this method to do that.</p>\n\n<p>For example, to change from cm-1 to meV:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"c1\"># Spectra.set_units(desired_units, units_input)</span>\n<span class=\"n\">Spectra</span><span class=\"o\">.</span><span class=\"n\">set_units</span><span class=\"p\">(</span><span class=\"s1\">&#39;meV&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;cm-1&#39;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">units</span>, </span><span class=\"param\"><span class=\"n\">units_in</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">default_unit</span><span class=\"o\">=</span><span class=\"s1\">&#39;cm-1&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "aton.spectra.classes.Material", "modulename": "aton.spectra.classes", "qualname": "Material", "kind": "class", "doc": "<p>Material class.\nUsed to calculate molar masses and cross sections,\nand to pass data to different analysis functions\nsuch as <code>aton.spectra.deuterium.impulse_approx().</code></p>\n"}, {"fullname": "aton.spectra.classes.Material.__init__", "modulename": "aton.spectra.classes", "qualname": "Material.__init__", "kind": "function", "doc": "<p>All values can be set when initializing the Material object.\nHowever, it is recommended to only set the elements and the grams,\nand optionally the name, and calculate the rest with <code>Material.set()</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">elements</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">grams</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">grams_error</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">mols</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">mols_error</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">molar_mass</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">cross_section</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">peaks</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "aton.spectra.classes.Material.elements", "modulename": "aton.spectra.classes", "qualname": "Material.elements", "kind": "variable", "doc": "<p>Dict of atoms in the material, as in <code>{'H': 6, 'C':1, 'N':1}</code>.\nIsotopes can be expressed as 'H2', 'He4', etc. with the atom symbol + isotope mass number.</p>\n"}, {"fullname": "aton.spectra.classes.Material.name", "modulename": "aton.spectra.classes", "qualname": "Material.name", "kind": "variable", "doc": "<p>String with the name of the material.</p>\n"}, {"fullname": "aton.spectra.classes.Material.grams", "modulename": "aton.spectra.classes", "qualname": "Material.grams", "kind": "variable", "doc": "<p>Mass, in grams.</p>\n"}, {"fullname": "aton.spectra.classes.Material.grams_error", "modulename": "aton.spectra.classes", "qualname": "Material.grams_error", "kind": "variable", "doc": "<p>Error of the measured mass in grams.\nSet automatically with <code>Material.set()</code>.</p>\n"}, {"fullname": "aton.spectra.classes.Material.mols", "modulename": "aton.spectra.classes", "qualname": "Material.mols", "kind": "variable", "doc": "<p>Number of moles.\nSet automatically with <code>Material.set()</code>.</p>\n"}, {"fullname": "aton.spectra.classes.Material.mols_error", "modulename": "aton.spectra.classes", "qualname": "Material.mols_error", "kind": "variable", "doc": "<p>Error of the number of moles.\nSet automatically with <code>Material.set()</code>.</p>\n"}, {"fullname": "aton.spectra.classes.Material.molar_mass", "modulename": "aton.spectra.classes", "qualname": "Material.molar_mass", "kind": "variable", "doc": "<p>Molar mass of the material, in mol/g.\nCalculated automatically with <code>Material.set()</code>.</p>\n"}, {"fullname": "aton.spectra.classes.Material.cross_section", "modulename": "aton.spectra.classes", "qualname": "Material.cross_section", "kind": "variable", "doc": "<p>Neutron total bound scattering cross section, in barns.\nCalculated automatically with <code>Material.set()</code>.</p>\n"}, {"fullname": "aton.spectra.classes.Material.peaks", "modulename": "aton.spectra.classes", "qualname": "Material.peaks", "kind": "variable", "doc": "<p>Dict with interesting peaks that you might want to store for later use.</p>\n"}, {"fullname": "aton.spectra.classes.Material.set", "modulename": "aton.spectra.classes", "qualname": "Material.set", "kind": "function", "doc": "<p>Set the molar mass, cross section and errors of the material.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "aton.spectra.classes.Material.print", "modulename": "aton.spectra.classes", "qualname": "Material.print", "kind": "function", "doc": "<p>Print a summary with the material information.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "aton.spectra.deuterium", "modulename": "aton.spectra.deuterium", "kind": "module", "doc": "<h1 id=\"description\">Description</h1>\n\n<p>This module contains methods to calculate deuteration levels from different spectra.</p>\n\n<h1 id=\"index\">Index</h1>\n\n<ul>\n<li><code>impulse_approx()</code></li>\n<li><code>peaks_mapbi3()</code></li>\n</ul>\n\n<hr />\n"}, {"fullname": "aton.spectra.deuterium.impulse_approx", "modulename": "aton.spectra.deuterium", "qualname": "impulse_approx", "kind": "function", "doc": "<p>Calculate the deuteration levels from INS spectra\nwith the <em>Impulse Approximation</em>, see\n<a href=\"https://www.tandfonline.com/doi/full/10.1080/00018732.2017.1317963\">https://www.tandfonline.com/doi/full/10.1080/00018732.2017.1317963</a>.</p>\n\n<p>Protonated and deuterated materials must be specified\nas <code>aton.spectra.Material</code> objects.\nThe threshold controls the start of the plateau (in meV)\nto start considering Deep Inelastic Neutron Scattering (DINS).\nThe protonated and deuterated dataframe indexes are specified\nby <code>H_df_index</code> and <code>D_df_index</code>, respectively.</p>\n\n<p>In this approximation, the ideal ratio between\nthe cross-sections and the experimental ratio between\nthe pleteaus at high energies should be the same:\n$$\n\\frac{\\text{plateau_D}}{\\text{plateau_H}} \\approx \\frac{\\text{cross_section_D}}{\\text{cross_section_H}}\n$$\nTaking this into account, the deuteration is estimated as:\n$$\n\\text{Deuteration} = \\frac{1-\\text{real_ratio}}{1-\\text{ideal_ratio}}\n$$</p>\n\n<div class=\"alert warning\">\n<em>Warning</em>\n<p>This approximation is very sensitive to the mass sample, specified by <code>aton.spectra.Material.grams</code>.</p>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">ins</span><span class=\"p\">:</span> <span class=\"n\">aton</span><span class=\"o\">.</span><span class=\"n\">spectra</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">Spectra</span>,</span><span class=\"param\">\t<span class=\"n\">material_H</span><span class=\"p\">:</span> <span class=\"n\">aton</span><span class=\"o\">.</span><span class=\"n\">spectra</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">Material</span>,</span><span class=\"param\">\t<span class=\"n\">material_D</span><span class=\"p\">:</span> <span class=\"n\">aton</span><span class=\"o\">.</span><span class=\"n\">spectra</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">Material</span>,</span><span class=\"param\">\t<span class=\"n\">threshold</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">600</span>,</span><span class=\"param\">\t<span class=\"n\">H_df_index</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">D_df_index</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span>:</span></span>", "funcdef": "def"}, {"fullname": "aton.spectra.deuterium.peaks_mapbi3", "modulename": "aton.spectra.deuterium", "qualname": "peaks_mapbi3", "kind": "function", "doc": "<p>Estimates CH$_3$NH$_3$PbI$_3$ deuteration by integrating the INS disrotatory peaks.</p>\n\n<p>The INS disrotatory peaks of CH3NH3 appear at ~38 meV for the fully protonated sample.\nNote that <code>peaks</code> must be a dictionary with the peak limits\nand the baseline, as in the example below:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">peaks</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">&#39;baseline&#39;</span> <span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;baseline_error&#39;</span> <span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;h6d0&#39;</span> <span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">41</span><span class=\"p\">,</span> <span class=\"mi\">43</span><span class=\"p\">],</span>\n    <span class=\"s1\">&#39;h5d1&#39;</span> <span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">41</span><span class=\"p\">,</span> <span class=\"mi\">43</span><span class=\"p\">],</span>\n    <span class=\"s1\">&#39;h4d2&#39;</span> <span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">41</span><span class=\"p\">,</span> <span class=\"mi\">43</span><span class=\"p\">],</span>\n    <span class=\"s1\">&#39;h3d3&#39;</span> <span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mf\">34.7</span><span class=\"p\">,</span> <span class=\"mf\">37.3</span><span class=\"p\">],</span>\n    <span class=\"s1\">&#39;h2d4&#39;</span> <span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mf\">31.0</span><span class=\"p\">,</span> <span class=\"mf\">33.0</span><span class=\"p\">],</span>\n    <span class=\"s1\">&#39;h1d5&#39;</span> <span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mf\">28.0</span><span class=\"p\">,</span> <span class=\"mf\">30.5</span><span class=\"p\">],</span>\n    <span class=\"s1\">&#39;h0d6&#39;</span> <span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mf\">26.5</span><span class=\"p\">,</span> <span class=\"mf\">28.0</span><span class=\"p\">],</span>\n    <span class=\"p\">}</span>\n</code></pre>\n</div>\n\n<p>Peak keywords required for selective deuteration (only C or only N):\n<code>h6d0</code>, <code>h5d1</code>, <code>h4d2</code>, <code>h3d3</code>.</p>\n\n<p>Additional peak keywords required for total deuteration:\n<code>h2d4</code>, <code>h1d5</code>, <code>h0d6</code>.</p>\n\n<p>If some peak is not present in your sample,\njust set the limits to a small baseline plateau.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ins</span><span class=\"p\">:</span> <span class=\"n\">aton</span><span class=\"o\">.</span><span class=\"n\">spectra</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">Spectra</span>, </span><span class=\"param\"><span class=\"n\">peaks</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>, </span><span class=\"param\"><span class=\"n\">df_index</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "aton.spectra.fit", "modulename": "aton.spectra.fit", "kind": "module", "doc": "<h1 id=\"description\">Description</h1>\n\n<p>This module contains functions for fitting and analyzing spectral data.</p>\n\n<h1 id=\"index\">Index</h1>\n\n<ul>\n<li><code>plateau()</code></li>\n<li><code>area_under_peak()</code></li>\n<li><code>ratio_areas()</code></li>\n<li><code>mean()</code></li>\n</ul>\n\n<hr />\n"}, {"fullname": "aton.spectra.fit.plateau", "modulename": "aton.spectra.fit", "qualname": "plateau", "kind": "function", "doc": "<p>Fit the mean value and the error of a plateau in a <code>aton.spectra.Spectra</code> object.</p>\n\n<p>If <code>aton.spectra.Spectra.dfs[df_index]</code> has an 'Error' column, those errors are also taken into account\nalong with the standard deviation of the mean, else only the standard deviation is considered.\nThe 'Error' column title can be any string in <code>maatpy.alias.file['Error']</code>.</p>\n\n<p>Use as <code>maatpy.fit.plateau(spectra, cuts=[low_cut, high_cut], df_index=0)</code>.\nNote that <code>cuts</code>, <code>low_cut</code> and/or <code>top_cut</code> can be set to None.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">spectra</span><span class=\"p\">:</span> <span class=\"n\">aton</span><span class=\"o\">.</span><span class=\"n\">spectra</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">Spectra</span>,</span><span class=\"param\">\t<span class=\"n\">cuts</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">df_index</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span>:</span></span>", "funcdef": "def"}, {"fullname": "aton.spectra.fit.area_under_peak", "modulename": "aton.spectra.fit", "qualname": "area_under_peak", "kind": "function", "doc": "<p>Calculate the area under a given peak.</p>\n\n<p>Peaks must be defined as <code>peak:list=[xmin, xmax, baseline=0, baseline_error=0]</code>.\nIf the dataset has no <code>Error</code> column, the error for each point is assumed to be the same\nas the baseline error if <code>errors_as_in_baseline=True</code>, otherwise it is assumed to be zero.\nIf <code>min_as_baseline=True</code> and <code>baseline=0</code>, the baseline is assumed to be the minimum value.\nAlso, if <code>min_as_baseline=True</code> and there are negative areas even after applying the baseline,\nthe baseline will be corrected to the minimum value.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">spectra</span><span class=\"p\">:</span> <span class=\"n\">aton</span><span class=\"o\">.</span><span class=\"n\">spectra</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">Spectra</span>,</span><span class=\"param\">\t<span class=\"n\">peak</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">df_index</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">errors_as_in_baseline</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">min_as_baseline</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span>:</span></span>", "funcdef": "def"}, {"fullname": "aton.spectra.fit.ratio_areas", "modulename": "aton.spectra.fit", "qualname": "ratio_areas", "kind": "function", "doc": "<p>Check the ratio between two areas, e.g. to estimate deuteration levels from ATR data.</p>\n\n<p>The ratio is calculated as <code>area / area_total</code>. This behavior is modified if <code>inverse_ratio = True</code>,\nso that the ratio is calculated as <code>(area_total - area) / area_total</code>.\nNote that changing the ratio calculation also affects the error propagation.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">area</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">area_total</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">area_error</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">area_total_error</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">inverse_ratio</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span>:</span></span>", "funcdef": "def"}, {"fullname": "aton.spectra.fit.mean", "modulename": "aton.spectra.fit", "qualname": "mean", "kind": "function", "doc": "<p>Takes an <code>array</code> of numerical values and returns the mean and standard deviation.</p>\n\n<p>It is calculated with numpy as:</p>\n\n<p>$\\sigma_{x}=\\sqrt{\\frac{\\sum{(x_{i}-{\\overline{x}})^2}}{N-\\text{ddof}}}$</p>\n\n<p>where ddof are the delta <code>degrees_of_freedom</code>, zero by default.\nSet it to <code>1</code> for a corrected sample standard deviation (low N cases),\nsee more details <a href=\"https://en.wikipedia.org/wiki/Standard_deviation#Corrected_sample_standard_deviation\">here</a>.</p>\n\n<p>The mean is rounded up to the order of the error by default. To override this behaviour, set <code>rounded=False</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">array</span><span class=\"p\">:</span> <span class=\"nb\">list</span>, </span><span class=\"param\"><span class=\"n\">rounded</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">degrees_of_freedom</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span>:</span></span>", "funcdef": "def"}, {"fullname": "aton.spectra.normalize", "modulename": "aton.spectra.normalize", "kind": "module", "doc": "<h1 id=\"description\">Description</h1>\n\n<p>This module contains functions to normalize data and other variables.</p>\n\n<h1 id=\"index\">Index</h1>\n\n<ul>\n<li><code>unit_str()</code></li>\n<li><code>spectra()</code></li>\n<li><code>area()</code></li>\n</ul>\n\n<hr />\n"}, {"fullname": "aton.spectra.normalize.unit_str", "modulename": "aton.spectra.normalize", "qualname": "unit_str", "kind": "function", "doc": "<p>Normalize <code>unit</code> string from user input.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unit</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "aton.spectra.normalize.height", "modulename": "aton.spectra.normalize", "qualname": "height", "kind": "function", "doc": "<p>Normalize a <code>spectra</code> by height</p>\n\n<p>Optional <code>aton.spectra.classes.Scaling</code> attributes can be used.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">spectra</span><span class=\"p\">:</span> <span class=\"n\">aton</span><span class=\"o\">.</span><span class=\"n\">spectra</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">Spectra</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "aton.spectra.normalize.area", "modulename": "aton.spectra.normalize", "qualname": "area", "kind": "function", "doc": "<p>Normalize <code>spectra</code> by the area under the datasets.</p>\n\n<p>Optional <code>aton.spectra.classes.Scaling</code> attributes can be used.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">spectra</span><span class=\"p\">:</span> <span class=\"n\">aton</span><span class=\"o\">.</span><span class=\"n\">spectra</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">Spectra</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "aton.spectra.plot", "modulename": "aton.spectra.plot", "kind": "module", "doc": "<h1 id=\"description\">Description</h1>\n\n<p>This module loads the <code>plot()</code> function, used to plot <code>aton.spectra.SpectraData</code> data.</p>\n\n<hr />\n"}, {"fullname": "aton.spectra.plot.plot", "modulename": "aton.spectra.plot", "qualname": "plot", "kind": "function", "doc": "<p>Plots a <code>spectra</code>.</p>\n\n<p>Optional <code>aton.spectra.classes.Plotting</code> and\n<code>aton.spectra.classes.Scaling</code> attributes can be used.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">spectrum</span><span class=\"p\">:</span> <span class=\"n\">aton</span><span class=\"o\">.</span><span class=\"n\">spectra</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">Spectra</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "aton.spectra.samples", "modulename": "aton.spectra.samples", "kind": "module", "doc": "<h1 id=\"description\">Description</h1>\n\n<p>This module contains premade examples of material compositions.\nThe <code>aton.spectra.Material.grams</code> is yet to be provided,\nbefore setting the material with <code>aton.spectra.Material.set()</code>.</p>\n\n<hr />\n"}, {"fullname": "aton.spectra.samples.MAPbI3", "modulename": "aton.spectra.samples", "qualname": "MAPbI3", "kind": "variable", "doc": "<p>CH$_3$NH$_3$PbI$_3$</p>\n", "default_value": "&lt;aton.spectra.classes.Material object&gt;"}, {"fullname": "aton.spectra.samples.CD3ND3PbI3", "modulename": "aton.spectra.samples", "qualname": "CD3ND3PbI3", "kind": "variable", "doc": "<p>CD$_3$ND$_3$PbI$_3$.\nWith experimental values of the partially-deuterated amine peaks\nfor the disrotatory mode of MAPbI3's methylammonium.\nMeasured at TOSCA, ISIS RAL, UK, May 2024.</p>\n", "default_value": "&lt;aton.spectra.classes.Material object&gt;"}, {"fullname": "aton.spectra.samples.CH3ND3PbI3", "modulename": "aton.spectra.samples", "qualname": "CH3ND3PbI3", "kind": "variable", "doc": "<p>CH$_3$ND$_3$PbI$_3$</p>\n", "default_value": "&lt;aton.spectra.classes.Material object&gt;"}, {"fullname": "aton.spectra.samples.CD3NH3PbI3", "modulename": "aton.spectra.samples", "qualname": "CD3NH3PbI3", "kind": "variable", "doc": "<p>CD$_3$NH$_3$PbI$_3$</p>\n", "default_value": "&lt;aton.spectra.classes.Material object&gt;"}, {"fullname": "aton.spectra.samples.CH3NH3I", "modulename": "aton.spectra.samples", "qualname": "CH3NH3I", "kind": "variable", "doc": "<p>CH$_3$NH$_3$I</p>\n", "default_value": "&lt;aton.spectra.classes.Material object&gt;"}, {"fullname": "aton.spectra.samples.CH3ND3I", "modulename": "aton.spectra.samples", "qualname": "CH3ND3I", "kind": "variable", "doc": "<p>CH$_3$ND$_3$I</p>\n", "default_value": "&lt;aton.spectra.classes.Material object&gt;"}, {"fullname": "aton.text", "modulename": "aton.text", "kind": "module", "doc": "<h1 id=\"description\">Description</h1>\n\n<p>This module contains tools for general text operations.</p>\n\n<h1 id=\"index\">Index</h1>\n\n<ul>\n<li><code>aton.text.find</code></li>\n<li><code>aton.text.edit</code></li>\n<li><code>aton.text.extract</code></li>\n</ul>\n"}, {"fullname": "aton.text.edit", "modulename": "aton.text.edit", "kind": "module", "doc": "<h1 id=\"description\">Description</h1>\n\n<p>Functions to manipulate the content of text files.</p>\n\n<h1 id=\"index\">Index</h1>\n\n<ul>\n<li><code>insert_at()</code></li>\n<li><code>insert_under()</code></li>\n<li><code>replace()</code></li>\n<li><code>replace_line()</code></li>\n<li><code>replace_between()</code></li>\n<li><code>delete_under()</code></li>\n<li><code>correct_with_dict()</code></li>\n<li><code>from_template()</code></li>\n</ul>\n\n<hr />\n"}, {"fullname": "aton.text.edit.insert_at", "modulename": "aton.text.edit", "qualname": "insert_at", "kind": "function", "doc": "<p>Inserts a <code>text</code> in the line with <code>position</code> index of a given <code>filepath</code>.</p>\n\n<p>If <code>position</code> is negative, starts from the end of the file.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filepath</span>, </span><span class=\"param\"><span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">position</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "aton.text.edit.insert_under", "modulename": "aton.text.edit", "qualname": "insert_under", "kind": "function", "doc": "<p>Inserts a <code>text</code> under the line(s) containing the <code>key</code> in <code>filepath</code>.</p>\n\n<p>The keyword can be at any position within the line.\nRegular expressions can be used by setting <code>regex=True</code>. </p>\n\n<p>By default all matches are inserted with <code>insertions=0</code>,\nbut it can insert only a specific number of matches\nwith positive numbers (1, 2...), or starting from the bottom with negative numbers.</p>\n\n<p>The text can be introduced after a specific number of lines after the match,\nchanging the value <code>skips</code>. Negative integers introduce the text in the previous lines.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">filepath</span>,</span><span class=\"param\">\t<span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">insertions</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">skips</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">regex</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "aton.text.edit.replace", "modulename": "aton.text.edit", "qualname": "replace", "kind": "function", "doc": "<p>Replaces the <code>key</code> with <code>text</code> in <code>filepath</code>.</p>\n\n<p>It can also be used to delete the keyword with <code>text=''</code>.\nTo search with regular expressions, set <code>regex=True</code>.</p>\n\n<p>The value <code>replacements</code> specifies the number of replacements to perform:\n1 to replace only the first keyword found, 2, 3...\nUse negative values to replace from the end of the file,\neg. to replace the last found key, use <code>replacements=-1</code>.\nTo replace all values, set <code>replacements = 0</code>, which is the value by default.</p>\n\n<pre><code>line... key ...line -&gt; line... text ...line\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">filepath</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">replacements</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">regex</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "aton.text.edit.replace_line", "modulename": "aton.text.edit", "qualname": "replace_line", "kind": "function", "doc": "<p>Replaces the entire line(s) containing the <code>key</code> with the <code>text</code> in <code>filepath</code>.</p>\n\n<p>It can be used to delete line(s) by setting <code>text=''</code>.\nRegular expressions can be used with <code>regex=True</code>.</p>\n\n<p>The value <code>replacements</code> specifies the number of lines to replace:\n1 to replace only the first line with the keyword, 2, 3...\nUse negative values to replace from the end of the file,\ne.g., to replace only the last line containing the keyword, use <code>replacements = -1</code>.\nTo replace all lines, set <code>replacements = 0</code>, which is the value by default.</p>\n\n<p>The default line to replace is the matching line,\nbut it can be any other specific line after or before the matching line;\nthis is indicated with <code>skips</code> as a positive or negative integer.</p>\n\n<p>More lines can be replaced with <code>additional</code> lines (int).\nNote that the matched line plus the additional lines\nwill be replaced, this is, additional lines +1.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">filepath</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">replacements</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">skips</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">additional</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">regex</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "aton.text.edit.replace_between", "modulename": "aton.text.edit", "qualname": "replace_between", "kind": "function", "doc": "<p>Replace with <code>text</code> between keywords <code>key1</code> and <code>key2</code> in <code>filepath</code>.</p>\n\n<p>It can be used to delete the text between the keys by setting <code>text=''</code>.\nRegular expressions can be used by setting <code>regex=True</code>.</p>\n\n<p>Key lines are also deleted if <code>delete_keys=True</code>.</p>\n\n<p>Only the first matches of the keywords are used by default;\nyou can use the last ones with <code>from_end = True</code>.</p>\n\n<pre><code>lines...\nkey1\ntext\nkey2\nlines...\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">filepath</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">key1</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">key2</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">delete_keys</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">from_end</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">regex</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "aton.text.edit.delete_under", "modulename": "aton.text.edit", "qualname": "delete_under", "kind": "function", "doc": "<p>Deletes all the content under the line containing the <code>key</code> in <code>filepath</code>.</p>\n\n<p>The keyword can be at any position within the line.\nRegular expressions can be used by setting <code>regex=True</code>.</p>\n\n<p>By default the first <code>match</code> is used; it can be any positive integer (0 is treated as 1!),\nincluding negative integers to select a match starting from the end of the file.</p>\n\n<p>The content can be deleted after a specific number of lines after the match,\nchanging the value <code>skips</code>, that skips the specified number of lines.\nNegative integers start deleting the content from the previous lines.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">filepath</span>,</span><span class=\"param\">\t<span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">match</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">skips</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">regex</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "aton.text.edit.correct_with_dict", "modulename": "aton.text.edit", "qualname": "correct_with_dict", "kind": "function", "doc": "<p>Corrects the given text file <code>filepath</code> using a <code>correct</code> dictionary.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filepath</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">correct</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "aton.text.edit.from_template", "modulename": "aton.text.edit", "qualname": "from_template", "kind": "function", "doc": "<p>Creates <code>new</code> file from <code>old</code>, replacing values from a <code>correct</code> dict, inserting a <code>comment</code> on top.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">old</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">new</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">correct</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">comment</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "aton.text.extract", "modulename": "aton.text.extract", "kind": "module", "doc": "<h1 id=\"description\">Description</h1>\n\n<p>Functions to extract data from raw text strings.</p>\n\n<h1 id=\"index\">Index</h1>\n\n<ul>\n<li><code>number()</code></li>\n<li><code>string()</code></li>\n<li><code>column()</code></li>\n<li><code>coords()</code></li>\n<li><code>element()</code></li>\n</ul>\n\n<hr />\n"}, {"fullname": "aton.text.extract.number", "modulename": "aton.text.extract", "qualname": "number", "kind": "function", "doc": "<p>Extracts the float value of a given <code>name</code> variable from a raw <code>text</code>.</p>\n\n<p>Example:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;energy =   500.0 Ry&#39;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">thotpy</span><span class=\"o\">.</span><span class=\"n\">extract</span><span class=\"o\">.</span><span class=\"n\">number</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"s1\">&#39;energy&#39;</span><span class=\"p\">)</span>\n<span class=\"mf\">500.0</span>  <span class=\"c1\"># float output</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "aton.text.extract.string", "modulename": "aton.text.extract", "qualname": "string", "kind": "function", "doc": "<p>Extracts the <code>text</code> value of a given <code>name</code> variable from a raw string.\nStops before an optional <code>stop</code> string.\nRemoves leading and trailing commas by default, change this with <code>strip=False</code>.</p>\n\n<p>Example:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;energy =   500.0 Ry were calculated&#39;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">thotpy</span><span class=\"o\">.</span><span class=\"n\">extract</span><span class=\"o\">.</span><span class=\"n\">string</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"s1\">&#39;energy&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;were&#39;</span><span class=\"p\">)</span>\n<span class=\"s1\">&#39;500.0 Ry&#39;</span>  <span class=\"c1\"># String output</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>, </span><span class=\"param\"><span class=\"n\">stop</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>, </span><span class=\"param\"><span class=\"n\">strip</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "aton.text.extract.column", "modulename": "aton.text.extract", "qualname": "column", "kind": "function", "doc": "<p>Extracts the desired float <code>column</code> index of a given <code>string</code> (0 by default).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">column</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "aton.text.extract.coords", "modulename": "aton.text.extract", "qualname": "coords", "kind": "function", "doc": "<p>Returns a list with the float coordinates expressed in a given <code>text</code> string.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "aton.text.extract.element", "modulename": "aton.text.extract", "qualname": "element", "kind": "function", "doc": "<p>Extract a chemical element from a raw <code>text</code> string.</p>\n\n<p>If there are several elements, you can return a specific <code>index</code> match (positive, 0 by default).\nAllows for standard elements (H, He, Na...) and isotopes (H2, He4...).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">index</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "aton.text.find", "modulename": "aton.text.find", "kind": "module", "doc": "<h1 id=\"description\">Description</h1>\n\n<p>Functions to search for specific content inside text files.</p>\n\n<h1 id=\"index\">Index</h1>\n\n<p>Functions to find and return specific text strings:</p>\n\n<ul>\n<li><code>lines()</code></li>\n<li><code>between()</code></li>\n</ul>\n\n<p>Functions to find the position in the file of specific text strings:</p>\n\n<ul>\n<li><code>pos()</code></li>\n<li><code>pos_regex()</code></li>\n<li><code>next_pos()</code></li>\n<li><code>next_pos_regex()</code></li>\n<li><code>line_pos()</code></li>\n<li><code>between_pos()</code></li>\n</ul>\n\n<hr />\n"}, {"fullname": "aton.text.find.lines", "modulename": "aton.text.find", "qualname": "lines", "kind": "function", "doc": "<p>Returns a list with the matches containing the <code>key</code> string in <code>filepath</code>.</p>\n\n<p>If no match is found, returns an empty list.</p>\n\n<p>To use regular expressions in the search, set <code>regex=True</code>\n(deactivated by default).</p>\n\n<p>The value <code>matches</code> specifies the max number of matches to be returned.\nDefaults to 0 to return all possible matches. Set it to 1 to return only one match,\nor to negative integers to start the search from the end of the file upwards.</p>\n\n<p>The value <code>additional</code> specifies the number of additional lines\nbelow the target line that are also returned;\n2 to return the found line plus two additional lines below, etc.\nNegative values return the specified number of lines before the target line.\nThe original ordering from the file is preserved.\nDefaults to <code>additional=0</code>, only returning the target line.\nBy default, the additional lines are returned\nin the same list item as the match separated by a <code>\\n</code>,\nunless <code>split=True</code>, in which case these additional lines\nare splitted and added as additional items in the list.</p>\n\n<p>Use example:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"c1\"># with split = False</span>\n<span class=\"n\">aton</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"o\">.</span><span class=\"n\">lines</span><span class=\"p\">(</span><span class=\"n\">filepath</span><span class=\"o\">=</span><span class=\"n\">file</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"s1\">&#39;key&#39;</span><span class=\"p\">,</span> <span class=\"n\">additional</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"p\">[</span><span class=\"s1\">&#39;line with key 1</span><span class=\"se\">\\n</span><span class=\"s1\">line below first match&#39;</span><span class=\"p\">,</span>\n     <span class=\"s1\">&#39;line with key 2</span><span class=\"se\">\\n</span><span class=\"s1\">line below second match]</span>\n<span class=\"c1\"># with split = True</span>\n<span class=\"n\">aton</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"o\">.</span><span class=\"n\">lines</span><span class=\"p\">(</span><span class=\"n\">filepath</span><span class=\"o\">=</span><span class=\"n\">file</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"s1\">&#39;key&#39;</span><span class=\"p\">,</span> <span class=\"n\">additional</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">split</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"p\">[</span><span class=\"s1\">&#39;line with key 1&#39;</span><span class=\"p\">,</span>\n     <span class=\"s1\">&#39;line below first match&#39;</span><span class=\"p\">,</span>\n     <span class=\"s1\">&#39;line with key 2&#39;</span><span class=\"p\">,</span>\n     <span class=\"s1\">&#39;line below second match]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">filepath</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">matches</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">additional</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">split</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">regex</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "aton.text.find.between", "modulename": "aton.text.find", "qualname": "between", "kind": "function", "doc": "<p>Returns the content between the lines with <code>key1</code> and <code>key2</code> in <code>filepath</code>.</p>\n\n<p>Keywords can be at any position within the line.\nRegular expressions can be used by setting <code>regex=True</code>.</p>\n\n<p>Key lines are omited by default, but can be returned with <code>include_keys=True</code>.</p>\n\n<p>If there is more than one match, only the first one is considered by default;\nset <code>match</code> (int) to specify a particular match (1, 2... 0 is considered as 1!).\nUse negative numbers to start from the end of the file.</p>\n\n<p>If no match is found, returns an empty string.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">filepath</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">key1</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">key2</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">include_keys</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">match</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">regex</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "aton.text.find.pos", "modulename": "aton.text.find", "qualname": "pos", "kind": "function", "doc": "<p>Returns a list with the positions of the <code>key</code> in <code>filepath</code>.</p>\n\n<p>If no match is found, returns an empty list.</p>\n\n<p>The <code>filepath</code> can be a file or a memory mapped file.</p>\n\n<p>The value <code>matches</code> specifies the max number of matches to return.\nDefaults to 0 to return all possible matches.\nSet it to 1 to return only one match,\n2 to get the first two matches, etc.\nYou can also set it to negative integers to start\nsearching from the end of the file upwards.</p>\n\n<p>This method is faster than <code>pos_regex()</code>,\nbut does not search for regular expressions.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filepath</span>, </span><span class=\"param\"><span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">matches</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "aton.text.find.pos_regex", "modulename": "aton.text.find", "qualname": "pos_regex", "kind": "function", "doc": "<p>Returns a list of the positions of a <code>key</code> in a given <code>filepath</code> (actual file, not mmapped!).</p>\n\n<p>The value <code>matches</code> specifies the max number of matches to return.\nDefaults to 0 to return all possible matches. Set it to 1 to return only one match,\nor to negative integers to start searching from the end of the file upwards.</p>\n\n<p>This method is slower than <code>pos()</code>, but it can search for regular expressions.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filepath</span>, </span><span class=\"param\"><span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">matches</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "aton.text.find.next_pos", "modulename": "aton.text.find", "qualname": "next_pos", "kind": "function", "doc": "<p>Returns the next position of the <code>key</code> string in the given <code>filepath</code> (file or mmapped file),\nstarting from an initial <code>position</code> tuple.\nThe <code>match</code> number specifies the nonzero index of the next match to return (1, 2... 0 is considered as 1!).\nIt can be negative to search backwards from the initial position.\nThe last known positions will be returned if no more matches are found.</p>\n\n<p>This method is specific for normal strings.\nTo use regular expressions, check <code>next_pos_regex()</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filepath</span>, </span><span class=\"param\"><span class=\"n\">position</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span>, </span><span class=\"param\"><span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">match</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span>:</span></span>", "funcdef": "def"}, {"fullname": "aton.text.find.next_pos_regex", "modulename": "aton.text.find", "qualname": "next_pos_regex", "kind": "function", "doc": "<p>Returns the next position of the <code>key</code> string in the given <code>filepath</code>\n(actual file, not mmapped!), starting from an initial <code>position</code> tuple.\nThe <code>match</code> number specifies the next match to return (1, 2... 0 is considered as 1!).\nIt can be negative to search backwards from the initial position.\nThis method is specific for regular expressions.</p>\n\n<p>For normal strings, check the faster <code>next_pos()</code> method.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filepath</span>, </span><span class=\"param\"><span class=\"n\">position</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span>, </span><span class=\"param\"><span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">match</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span>:</span></span>", "funcdef": "def"}, {"fullname": "aton.text.find.line_pos", "modulename": "aton.text.find", "qualname": "line_pos", "kind": "function", "doc": "<p>Returns the position of the full line containing the <code>position</code> tuple,\nin the given <code>filepath</code> (whether file or memory mapped file).\nA specific line below can be returned with <code>skips</code> being a natural int,\nor previous lines with negative values.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filepath</span>, </span><span class=\"param\"><span class=\"n\">position</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span>, </span><span class=\"param\"><span class=\"n\">skips</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span>:</span></span>", "funcdef": "def"}, {"fullname": "aton.text.find.between_pos", "modulename": "aton.text.find", "qualname": "between_pos", "kind": "function", "doc": "<p>Returns the positions of the content between the lines containing\n<code>key1</code> and <code>key2</code> in the given <code>filepath</code>.\nKeywords can be at any position within the line.\nRegular expressions can be used by setting <code>regex=True</code>.</p>\n\n<p>Key lines are omited by default, but can be returned with <code>include_keys=True</code>.</p>\n\n<p>If there is more than one match, only the first one is considered by default;\nset <code>match</code> number to specify a particular match (1, 2... 0 is considered as 1!).\nUse negative numbers to start from the end of the file.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">filepath</span>,</span><span class=\"param\">\t<span class=\"n\">key1</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">key2</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">include_keys</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">match</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">regex</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span>:</span></span>", "funcdef": "def"}, {"fullname": "aton.units", "modulename": "aton.units", "kind": "module", "doc": "<h1 id=\"description\">Description</h1>\n\n<p>This module contains useful constants and conversion factors.</p>\n\n<h1 id=\"index\">Index</h1>\n\n<ul>\n<li><a href=\"#energy-conversion-factors\">Energy conversion factors</a></li>\n<li><a href=\"#distance-conversion-factors\">Distance conversion factors</a></li>\n<li><a href=\"#mass-conversion-factors\">Mass conversion factors</a></li>\n<li><a href=\"#pressure-conversion-factors\">Pressure conversion factors</a></li>\n<li><a href=\"#time-conversion-factors\">Time conversion factors</a></li>\n<li><a href=\"#universal-constants\">Universal constants</a></li>\n</ul>\n\n<h1 id=\"references\">References</h1>\n\n<p>These values come from the 2022 CODATA Internationally\nrecommended 2022 values of the Fundamental Physical Constants.</p>\n\n<hr />\n\n<h2 id=\"energy-conversion-factors\">Energy conversion factors</h2>\n\n<p>Note that <code>cm</code> refers to cm$^{-1}$.</p>\n"}, {"fullname": "aton.units.eV_to_meV", "modulename": "aton.units", "qualname": "eV_to_meV", "kind": "variable", "doc": "<p></p>\n", "default_value": "1000.0"}, {"fullname": "aton.units.meV_to_eV", "modulename": "aton.units", "qualname": "meV_to_eV", "kind": "variable", "doc": "<p></p>\n", "default_value": "0.001"}, {"fullname": "aton.units.meV_to_cm", "modulename": "aton.units", "qualname": "meV_to_cm", "kind": "variable", "doc": "<p></p>\n", "default_value": "8.0655"}, {"fullname": "aton.units.cm_to_meV", "modulename": "aton.units", "qualname": "cm_to_meV", "kind": "variable", "doc": "<p></p>\n", "default_value": "0.12398487384539086"}, {"fullname": "aton.units.eV_to_J", "modulename": "aton.units", "qualname": "eV_to_J", "kind": "variable", "doc": "<p></p>\n", "default_value": "1.602176634e-19"}, {"fullname": "aton.units.J_to_eV", "modulename": "aton.units", "qualname": "J_to_eV", "kind": "variable", "doc": "<p></p>\n", "default_value": "6.241509074460763e+18"}, {"fullname": "aton.units.meV_to_J", "modulename": "aton.units", "qualname": "meV_to_J", "kind": "variable", "doc": "<p></p>\n", "default_value": "1.6021766339999998e-22"}, {"fullname": "aton.units.J_to_meV", "modulename": "aton.units", "qualname": "J_to_meV", "kind": "variable", "doc": "<p></p>\n", "default_value": "6.241509074460763e+21"}, {"fullname": "aton.units.Ry_to_eV", "modulename": "aton.units", "qualname": "Ry_to_eV", "kind": "variable", "doc": "<p></p>\n", "default_value": "13.60569312299"}, {"fullname": "aton.units.eV_to_Ry", "modulename": "aton.units", "qualname": "eV_to_Ry", "kind": "variable", "doc": "<p></p>\n", "default_value": "0.07349864435133158"}, {"fullname": "aton.units.Ry_to_J", "modulename": "aton.units", "qualname": "Ry_to_J", "kind": "variable", "doc": "<p></p>\n", "default_value": "2.179872361103e-18"}, {"fullname": "aton.units.J_to_Ry", "modulename": "aton.units", "qualname": "J_to_Ry", "kind": "variable", "doc": "<p></p>\n", "default_value": "4.5874245567938074e+17"}, {"fullname": "aton.units.cal_to_J", "modulename": "aton.units", "qualname": "cal_to_J", "kind": "variable", "doc": "<p></p>\n", "default_value": "4.184"}, {"fullname": "aton.units.J_to_cal", "modulename": "aton.units", "qualname": "J_to_cal", "kind": "variable", "doc": "<p></p>\n", "default_value": "0.2390057361376673"}, {"fullname": "aton.units.kcal_to_J", "modulename": "aton.units", "qualname": "kcal_to_J", "kind": "variable", "doc": "<p></p>\n", "default_value": "4184.0"}, {"fullname": "aton.units.J_to_kcal", "modulename": "aton.units", "qualname": "J_to_kcal", "kind": "variable", "doc": "<hr />\n\n<h2 id=\"distance-conversion-factors\">Distance conversion factors</h2>\n\n<p>Note that <code>A</code> refers to Angstroms.</p>\n", "default_value": "0.0002390057361376673"}, {"fullname": "aton.units.A_to_m", "modulename": "aton.units", "qualname": "A_to_m", "kind": "variable", "doc": "<p></p>\n", "default_value": "1e-10"}, {"fullname": "aton.units.m_to_A", "modulename": "aton.units", "qualname": "m_to_A", "kind": "variable", "doc": "<p></p>\n", "default_value": "10000000000.0"}, {"fullname": "aton.units.bohr_to_m", "modulename": "aton.units", "qualname": "bohr_to_m", "kind": "variable", "doc": "<p></p>\n", "default_value": "5.29177210544e-11"}, {"fullname": "aton.units.m_to_bohr", "modulename": "aton.units", "qualname": "m_to_bohr", "kind": "variable", "doc": "<p></p>\n", "default_value": "18897261259.077824"}, {"fullname": "aton.units.A_to_bohr", "modulename": "aton.units", "qualname": "A_to_bohr", "kind": "variable", "doc": "<p></p>\n", "default_value": "1.8897261259077824"}, {"fullname": "aton.units.bohr_to_A", "modulename": "aton.units", "qualname": "bohr_to_A", "kind": "variable", "doc": "<hr />\n\n<h2 id=\"mass-conversion-factors\">Mass conversion factors</h2>\n", "default_value": "0.529177210544"}, {"fullname": "aton.units.amu_to_kg", "modulename": "aton.units", "qualname": "amu_to_kg", "kind": "variable", "doc": "<p></p>\n", "default_value": "1.6605390666e-27"}, {"fullname": "aton.units.kg_to_amu", "modulename": "aton.units", "qualname": "kg_to_amu", "kind": "variable", "doc": "<p></p>\n", "default_value": "6.022140762081123e+26"}, {"fullname": "aton.units.kg_to_g", "modulename": "aton.units", "qualname": "kg_to_g", "kind": "variable", "doc": "<p></p>\n", "default_value": "1000.0"}, {"fullname": "aton.units.g_to_kg", "modulename": "aton.units", "qualname": "g_to_kg", "kind": "variable", "doc": "<hr />\n\n<h2 id=\"pressure-conversion-factors\">Pressure conversion factors</h2>\n", "default_value": "0.001"}, {"fullname": "aton.units.GPa_to_Pa", "modulename": "aton.units", "qualname": "GPa_to_Pa", "kind": "variable", "doc": "<p></p>\n", "default_value": "1000000000.0"}, {"fullname": "aton.units.Pa_to_GPa", "modulename": "aton.units", "qualname": "Pa_to_GPa", "kind": "variable", "doc": "<p></p>\n", "default_value": "1e-09"}, {"fullname": "aton.units.kbar_to_bar", "modulename": "aton.units", "qualname": "kbar_to_bar", "kind": "variable", "doc": "<p></p>\n", "default_value": "1000.0"}, {"fullname": "aton.units.bar_to_kbar", "modulename": "aton.units", "qualname": "bar_to_kbar", "kind": "variable", "doc": "<p></p>\n", "default_value": "0.001"}, {"fullname": "aton.units.Pa_to_bar", "modulename": "aton.units", "qualname": "Pa_to_bar", "kind": "variable", "doc": "<p></p>\n", "default_value": "1e-05"}, {"fullname": "aton.units.bar_to_Pa", "modulename": "aton.units", "qualname": "bar_to_Pa", "kind": "variable", "doc": "<p></p>\n", "default_value": "99999.99999999999"}, {"fullname": "aton.units.GPa_to_kbar", "modulename": "aton.units", "qualname": "GPa_to_kbar", "kind": "variable", "doc": "<p></p>\n", "default_value": "10.0"}, {"fullname": "aton.units.kbar_to_GPa", "modulename": "aton.units", "qualname": "kbar_to_GPa", "kind": "variable", "doc": "<hr />\n\n<h2 id=\"time-conversion-factors\">Time conversion factors</h2>\n\n<p>Note that <code>H</code> refers to hours.</p>\n", "default_value": "0.1"}, {"fullname": "aton.units.H_to_s", "modulename": "aton.units", "qualname": "H_to_s", "kind": "variable", "doc": "<p></p>\n", "default_value": "3600.0"}, {"fullname": "aton.units.s_to_H", "modulename": "aton.units", "qualname": "s_to_H", "kind": "variable", "doc": "<hr />\n\n<h2 id=\"universal-constants\">Universal constants</h2>\n\n<p>Given in SI units unless stated otherwise.</p>\n", "default_value": "0.0002777777777777778"}, {"fullname": "aton.units.h", "modulename": "aton.units", "qualname": "h", "kind": "variable", "doc": "<p>Planck constant, in J\u00b7s.</p>\n", "default_value": "6.62607015e-34"}, {"fullname": "aton.units.h_eV", "modulename": "aton.units", "qualname": "h_eV", "kind": "variable", "doc": "<p>Planck constant, in eV\u00b7s.</p>\n", "default_value": "4.135667696923859e-15"}, {"fullname": "aton.units.hbar", "modulename": "aton.units", "qualname": "hbar", "kind": "variable", "doc": "<p>Reduced Planck constant, in J\u00b7s.</p>\n", "default_value": "1.0545718176461565e-34"}, {"fullname": "aton.units.hbar_eV", "modulename": "aton.units", "qualname": "hbar_eV", "kind": "variable", "doc": "<p>Reduced Planck constant, in eV\u00b7s.</p>\n", "default_value": "6.582119569509066e-16"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();